{"version":3,"sources":["my-apps/app-content/auth/roles/roles.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAUA;gBAKC,sBAAa,MAAa;oBACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAA4C,CAAC;gBAC7E,CAAC;gBAED,6BAAM,GAAN,UAAQ,UAAsB;oBAC7B,IAAI,GAAG,GAAU,UAAU,CAAC,UAAU,EAAE,GAAG,QAAQ,CAAC;oBACpD,IAAI,aAAa,GAAqC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAE,UAAU,CAAC,UAAU,EAAE,CAAE,CAAC;oBAC3G,aAAa,GAAG,OAAO,aAAa,KAAK,WAAW,GAAG,IAAI,GAAG,EAA+B,GAAG,aAAa,CAAC;oBAC9G,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAuB,GAAG,CAAE,CAAC,IAAI,CAAE,UAAE,EAA8D;4BAA7D,aAAK,EAAE,gBAAQ;wBAC5F,KAAK,CAAC,MAAM,CAAE,UAAE,IAAwB,IAAM,OAAA,CAAE,aAAa,CAAC,GAAG,CAAE,IAAI,CAAC,EAAE,CAAE,EAA9B,CAA8B,CAAE;6BAC5E,OAAO,CAAE,UAAE,IAAwB,IAAM,OAAA,aAAa,CAAC,GAAG,CAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAE,EAAlC,CAAkC,CAAE,CAAC;wBAChF,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAE,aAAa,CAAC,MAAM,EAAE,CAAE,CAAC;oBAC/C,CAAC,CAAE,CAAC;gBACL,CAAC;gBAED,oCAAa,GAAb,UAAe,UAAsB,EAAE,OAAc,EAAE,MAAa;oBACnE;wBAA0B,+BAAW;wBAArC;4BAA0B,8BAAW;wBAAE,CAAC;wBAAD,kBAAC;oBAAD,CAAvC,AAAwC,CAAd,KAAK,CAAC,KAAK,GAAG;oBACxC,IAAI,KAAK,GAAe,IAAI,WAAW,CAAE,UAAU,CAAE,CAAC;oBACtD,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAE,MAAM,EAAE,OAAO,CAAE,CAAA;gBACzC,CAAC;gBAED,kCAAW,GAAX,UAAa,UAAsB,EAAE,OAAc,EAAE,MAAa;oBACjE;wBAA0B,+BAAW;wBAArC;4BAA0B,8BAAW;wBAAE,CAAC;wBAAD,kBAAC;oBAAD,CAAvC,AAAwC,CAAd,KAAK,CAAC,KAAK,GAAG;oBACxC,IAAI,KAAK,GAAe,IAAI,WAAW,CAAE,UAAU,CAAE,CAAC;oBACtD,MAAM,CAAC,KAAK,CAAC,WAAW,CAAE,MAAM,EAAE,OAAO,CAAE,CAAA;gBAC5C,CAAC;gBAhCF;oBAAC,iBAAU,EAAE;;gCAAA;gBAkCb,mBAAC;YAAD,CAjCA,AAiCC,IAAA;YAjCD,uCAiCC,CAAA;YAED,oBAAe,YAAY,EAAC","file":"roles.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\n\nimport Carbon from \"carbonldp/Carbon\";\nimport * as App from \"carbonldp/App\";\nimport * as Roles from \"carbonldp/Auth/Roles\";\nimport * as PersistedRole from \"carbonldp/Auth/PersistedRole\";\nimport * as HTTP from \"carbonldp/HTTP\";\nimport * as Utils from \"carbonldp/Utils\";\n\n@Injectable()\nexport class RolesService {\n\n\tcarbon:Carbon;\n\tappContextsRoles:Map<string, Map<string, PersistedRole.Class>>;\n\n\tconstructor( carbon:Carbon ) {\n\t\tthis.carbon = carbon;\n\t\tthis.appContextsRoles = new Map<string, Map<string, PersistedRole.Class>>();\n\t}\n\n\tgetAll( appContext:App.Context ):Promise<PersistedRole.Class[]> {\n\t\tlet uri:string = appContext.getBaseURI() + \"roles/\";\n\t\tlet existingRoles:Map <string, PersistedRole.Class> = this.appContextsRoles.get( appContext.getBaseURI() );\n\t\texistingRoles = typeof existingRoles === \"undefined\" ? new Map<string, PersistedRole.Class>() : existingRoles;\n\t\treturn this.carbon.documents.getChildren<PersistedRole.Class>( uri ).then( ( [roles, response]:[PersistedRole.Class[], HTTP.Response.Class] ) => {\n\t\t\troles.filter( ( role:PersistedRole.Class ) => ! existingRoles.has( role.id ) )\n\t\t\t\t.forEach( ( role:PersistedRole.Class ) => existingRoles.set( role.id, role ) );\n\t\t\treturn Utils.A.from( existingRoles.values() );\n\t\t} );\n\t}\n\n\tregisterAgent( appContext:App.Context, agentID:string, roleID:string ):Promise<HTTP.Response.Class> {\n\t\tclass MockedRoles extends Roles.Class {}\n\t\tlet roles:Roles.Class = new MockedRoles( appContext );\n\t\treturn roles.addAgent( roleID, agentID )\n\t}\n\n\tremoveAgent( appContext:App.Context, agentID:string, roleID:string ):Promise<HTTP.Response.Class> {\n\t\tclass MockedRoles extends Roles.Class {}\n\t\tlet roles:Roles.Class = new MockedRoles( appContext );\n\t\treturn roles.removeAgent( roleID, agentID )\n\t}\n\n}\n\nexport default RolesService;"]}