import { ElementRef, EventEmitter, SimpleChange, AfterViewInit, OnChanges } from "@angular/core";
import { Message } from "carbon-panel/errors-area/error-message.component";
import * as RDFNode from "carbonldp/RDF/RDFNode";
import * as SDKContext from "carbonldp/SDKContext";
import * as RDFDocument from "carbonldp/RDF/Document";
import { Error as HTTPError } from "carbonldp/HTTP/Errors";
import { DocumentsResolverService } from "./../documents-resolver.service";
import { RootRecords } from "./../document-resource/document-resource.component";
import { BlankNodesComponent, BlankNodesRecords } from "./../blank-nodes/blank-nodes.component";
import { NamedFragmentsComponent, NamedFragmentsRecords } from "./../named-fragments/named-fragments.component";
import { BlankNodeRow } from "./../blank-nodes/blank-node.component";
import { NamedFragmentRow } from "./../named-fragments/named-fragment.component";
import "semantic-ui/semantic";
export declare class DocumentViewerComponent implements AfterViewInit, OnChanges {
    element: ElementRef;
    $element: JQuery;
    sections: string[];
    rootNode: RDFNode.Class;
    bNodes: BlankNodeRow[];
    namedFragments: NamedFragmentRow[];
    savingErrorMessage: Message;
    rootNodeHasChanged: boolean;
    rootNodeRecords: RootRecords;
    bNodesHaveChanged: boolean;
    bNodesChanges: BlankNodesRecords;
    namedFragmentsHaveChanged: boolean;
    namedFragmentsChanges: NamedFragmentsRecords;
    readonly documentContentHasChanged: boolean;
    documentsResolverService: DocumentsResolverService;
    uri: string;
    documentContext: SDKContext.Class;
    private _document;
    document: RDFDocument.Class;
    onLoadingDocument: EventEmitter<boolean>;
    onSavingDocument: EventEmitter<boolean>;
    onRefreshDocument: EventEmitter<string>;
    documentBNodes: BlankNodesComponent;
    documentNamedFragments: NamedFragmentsComponent;
    private _savingDocument;
    savingDocument: boolean;
    private _loadingDocument;
    loadingDocument: boolean;
    constructor(element: ElementRef, documentsResolverService: DocumentsResolverService);
    ngAfterViewInit(): void;
    ngOnChanges(changes: {
        [propName: string]: SimpleChange;
    }): void;
    receiveDocument(document: RDFDocument.Class): void;
    setRoot(): void;
    getDocument(uri: string, documentContext: SDKContext.Class): Promise<RDFDocument.Class>;
    generateFragments(): void;
    openBlankNode(id: string): void;
    openNamedFragment(id: string): void;
    initializeTabs(): void;
    goToSection(section: string): void;
    registerRootNodeChanges(records: RootRecords): void;
    registerBlankNodesChanges(bNodeChanges: BlankNodesRecords): void;
    registerNamedFragmentsChanges(namedFragmentsChanges: NamedFragmentsRecords): void;
    modifyRootNodeWithChanges(): void;
    modifyBNodesWithChanges(): void;
    modifyNamedFragmentsWithChanges(): void;
    clearDocumentChanges(): void;
    saveDocument(): void;
    getErrors(error: HTTPError): Promise<any[]>;
    clearSavingError(): void;
    closeMessage(message: HTMLElement): void;
    private beforeRefreshDocument(documentURI);
    private refreshDocument(documentURI);
    private toggleConfirmRefresh();
    private scrollTo(selector);
}
export default DocumentViewerComponent;
