{"version":3,"sources":["my-apps/app-content/security/roles/role-details/role-details.view.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAeA;gBAUC,yBAAa,MAAa,EAAE,KAAoB,EAAE,iBAAmC;oBAVtF,iBAmCC;oBA5BQ,eAAU,GAAW,IAAI,CAAC;oBAC1B,SAAI,GAAU,MAAM,CAAC;oBAG5B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;oBAE5B,IAAI,CAAC,GAAG,GAAG,iBAAiB,CAAC,SAAS,CAAC;oBACvC,iBAAiB,CAAC,eAAe,CAAC,SAAS,CAAE,UAAE,GAAO;wBACrD,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;wBACf,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC;wBACxB,UAAU,CAAE,cAAQ,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC,CAAA,CAAC,EAAE,CAAC,CAAE,CAAC;oBACnD,CAAC,CAAE,CAAC;gBACL,CAAC;gBAED,kCAAQ,GAAR;oBAAA,iBAOC;oBANA,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAE,UAAE,IAAiC;wBACpE,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;oBACvB,CAAC,CAAE,CAAC;oBACJ,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAE,UAAE,MAAM;wBAClD,KAAI,CAAC,IAAI,GAAG,MAAM,CAAE,MAAM,CAAE,GAAG,MAAM,CAAE,MAAM,CAAE,GAAG,MAAM,CAAC;oBAC1D,CAAC,CAAE,CAAC;gBACL,CAAC;gBAEO,mCAAS,GAAjB;oBACC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAE,CAAE,KAAK,CAAE,CAAE,CAAA;gBAClC,CAAC;gBAtCF;oBAAC,gBAAS,CAAE;wBACX,QAAQ,EAAE,sBAAsB;wBAChC,QAAQ,EAAE,gCAAQ;wBAClB,MAAM,EAAE,CAAE,2BAA2B,CAAE;qBACvC,CAAE;;mCAAA;gBAoCH,sBAAC;YAAD,CAnCA,AAmCC,IAAA;YAnCD,6CAmCC,CAAA;YAED,oBAAe,eAAe,EAAC","file":"role-details.view.js","sourcesContent":["import { Component } from \"@angular/core\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\n\nimport * as PersistedRole from \"carbonldp/Auth/PersistedRole\";\n\nimport { AppContentService } from \"carbonldp-panel/my-apps/app-content/app-content.service\";\n// import { Modes } from \"./role-details.component\";\n\nimport template from \"./role-details.view.html!\";\n\n@Component( {\n\tselector: \"cp-role-details-view\",\n\ttemplate: template,\n\tstyles: [ \":host { display: block; }\" ]\n} )\nexport class RoleDetailsView {\n\n\tprivate router:Router;\n\tprivate activatedRoute:ActivatedRoute;\n\n\tprivate app:any;\n\tprivate role:PersistedRole.Class;\n\tprivate canDisplay:boolean = true;\n\tprivate mode:string = \"READ\";\n\n\tconstructor( router:Router, route:ActivatedRoute, appContentService:AppContentService ) {\n\t\tthis.router = router;\n\t\tthis.activatedRoute = route;\n\n\t\tthis.app = appContentService.activeApp;\n\t\tappContentService.onAppHasChanged.subscribe( ( app:any ) => {\n\t\t\tthis.app = app;\n\t\t\tthis.canDisplay = false;\n\t\t\tsetTimeout( () => { this.canDisplay = true;}, 0 );\n\t\t} );\n\t}\n\n\tngOnInit() {\n\t\tthis.activatedRoute.data.forEach( ( data:{ role:PersistedRole.Class } ) => {\n\t\t\tthis.role = data.role;\n\t\t} );\n\t\tthis.activatedRoute.queryParams.subscribe( ( params ) => {\n\t\t\tthis.mode = params[ \"mode\" ] ? params[ \"mode\" ] : \"READ\";\n\t\t} );\n\t}\n\n\tprivate goToRoles():void {\n\t\tthis.router.navigate( [ \"../\" ] )\n\t}\n\n}\n\nexport default RoleDetailsView;\n"]}