{"version":3,"sources":["my-apps/app-content/security/roles/roles.service.ts"],"names":[],"mappings":"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","file":"roles.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\n\nimport Carbon from \"carbonldp/Carbon\";\nimport * as App from \"carbonldp/App\";\nimport * as Roles from \"carbonldp/App/Roles\";\nimport * as Role from \"carbonldp/App/Role\";\nimport * as PersistedRole from \"carbonldp/App/PersistedRole\";\nimport * as HTTP from \"carbonldp/HTTP\";\nimport * as Utils from \"carbonldp/Utils\";\nimport * as URI from \"carbonldp/RDF/URI\";\nimport * as NS from \"carbonldp/NS\";\nimport * as SPARQL from \"carbonldp/SPARQL\";\nimport { Class as RetrievalPreferences, OrderByProperty } from \"carbonldp/RetrievalPreferences\";\n\n@Injectable()\nexport class RolesService {\n\n\tcarbon:Carbon;\n\tappContextsRoles:Map<string, Map<string, PersistedRole.Class>>;\n\n\tconstructor( carbon:Carbon ) {\n\t\tthis.carbon = carbon;\n\t\tthis.appContextsRoles = new Map<string, Map<string, PersistedRole.Class>>();\n\t}\n\n\tpublic get( slugOrURI:string, appContext:App.Context ):Promise<PersistedRole.Class> {\n\t\tlet uri:string = appContext.getBaseURI() + `roles/${slugOrURI}/`;\n\t\tif( URI.Util.isAbsolute( slugOrURI ) ) uri = slugOrURI;\n\t\tlet existingRoles:Map <string, PersistedRole.Class> = this.appContextsRoles.get( appContext.getBaseURI() );\n\t\texistingRoles = typeof existingRoles === \"undefined\" ? new Map<string, PersistedRole.Class>() : existingRoles;\n\t\treturn appContext.documents.get<PersistedRole.Class>( uri ).then( ( [ role, response ]:[ PersistedRole.Class, HTTP.Response.Class ] ) => {\n\t\t\texistingRoles.set( role.id, role );\n\t\t\treturn role;\n\t\t} );\n\t}\n\n\tpublic getAll( appContext:App.Context, limit?:number, page?:number, orderBy?:string, ascending:boolean = true ):Promise<PersistedRole.Class[]> {\n\t\tlet uri:string = appContext.getBaseURI() + \"roles/\";\n\t\tlet existingRoles:Map <string, PersistedRole.Class> = this.appContextsRoles.get( appContext.getBaseURI() );\n\t\texistingRoles = typeof existingRoles === \"undefined\" ? new Map<string, PersistedRole.Class>() : existingRoles;\n\n\t\tlet preferences:RetrievalPreferences = {},\n\t\t\tproperty:OrderByProperty,\n\t\t\tname:OrderByProperty = {\n\t\t\t\t\"@id\": NS.CS.Predicate.namae,\n\t\t\t\t\"@type\": \"string\",\n\t\t\t},\n\t\t\temail:OrderByProperty = {\n\t\t\t\t\"@id\": NS.VCARD.Predicate.email,\n\t\t\t\t\"@type\": \"string\",\n\t\t\t},\n\t\t\tcreated:OrderByProperty = {\n\t\t\t\t\"@id\": NS.C.Predicate.created,\n\t\t\t\t\"@type\": \"dateTime\",\n\t\t\t},\n\t\t\tmodified:OrderByProperty = {\n\t\t\t\t\"@id\": NS.C.Predicate.modified,\n\t\t\t\t\"@type\": \"dateTime\",\n\t\t\t};\n\t\tswitch( orderBy ) {\n\t\t\tcase \"name\":\n\t\t\t\tproperty = name;\n\t\t\t\tbreak;\n\t\t\tcase \"email\":\n\t\t\t\tproperty = email;\n\t\t\t\tbreak;\n\t\t\tcase \"created\":\n\t\t\t\tproperty = created;\n\t\t\t\tbreak;\n\t\t\tcase \"modified\":\n\t\t\t\tproperty = modified;\n\t\t\t\tbreak;\n\t\t}\n\t\tif( ! ascending ) property[ \"@id\" ] = \"-\" + property[ \"@id\" ];\n\t\tif( ! ! orderBy ) preferences.orderBy = [ property ];\n\t\tif( typeof limit !== \"undefined\" ) preferences.limit = limit;\n\t\tif( typeof page !== \"undefined\" ) preferences.offset = page * limit;\n\n\t\treturn this.carbon.documents.getChildren<PersistedRole.Class>( uri, preferences ).then( ( [ roles, response ]:[ PersistedRole.Class[], HTTP.Response.Class ] ) => {\n\t\t\troles.filter( ( role:PersistedRole.Class ) => ! existingRoles.has( role.id ) )\n\t\t\t\t.forEach( ( role:PersistedRole.Class ) => existingRoles.set( role.id, role ) );\n\n\t\t\tlet rolesArray:PersistedRole.Class[] = Utils.A.from( existingRoles.values() );\n\t\t\tif( orderBy ) rolesArray = this.getSortedRoles( rolesArray, orderBy, ascending );\n\n\t\t\treturn rolesArray;\n\t\t} );\n\t}\n\n\tpublic create( appContext:App.Context, parentRole:string|PersistedRole.Class, role:PersistedRole.Class, slug?:string ):Promise<PersistedRole.Class> {\n\t\tclass MockedRoles extends Roles.Class {}\n\t\tlet roles:Roles.Class = new MockedRoles( appContext );\n\t\treturn roles.createChild( parentRole, <Role.Class & PersistedRole.Class>role, slug ).then( ( [ role, response ]:[ PersistedRole.Class, HTTP.Response.Class ] ) => {\n\t\t\treturn role;\n\t\t} );\n\t}\n\n\tpublic delete( appContext:App.Context, roleID:string ):Promise<HTTP.Response.Class> {\n\t\tclass MockedRoles extends Roles.Class {}\n\t\tlet roles:Roles.Class = new MockedRoles( appContext );\n\t\treturn appContext.documents.delete( roleID );\n\t}\n\n\tpublic saveAndRefresh( appContext:App.Context, role:PersistedRole.Class ):Promise<[ PersistedRole.Class, [ HTTP.Response.Class, HTTP.Response.Class ] ]> {\n\t\treturn role.saveAndRefresh();\n\t}\n\n\tpublic registerAgent( appContext:App.Context, agentID:string, roleID:string ):Promise<HTTP.Response.Class> {\n\t\tclass MockedRoles extends Roles.Class {}\n\t\tlet roles:Roles.Class = new MockedRoles( appContext );\n\t\treturn roles.addAgent( roleID, agentID )\n\t}\n\n\tpublic removeAgent( appContext:App.Context, agentID:string, roleID:string ):Promise<HTTP.Response.Class> {\n\t\tclass MockedRoles extends Roles.Class {}\n\t\tlet roles:Roles.Class = new MockedRoles( appContext );\n\t\treturn roles.removeAgent( roleID, agentID )\n\t}\n\n\tpublic getNumberOfRoles( appContext:App.Context ):Promise<number> {\n\t\tlet agentsURI:string = appContext.getBaseURI() + \"roles/\",\n\t\t\tquery:string = `SELECT DISTINCT (COUNT(?role) AS ?count) WHERE {\n\t\t\t?role a <https://carbonldp.com/ns/v1/security#AppRole> . \n\t\t}`;\n\t\treturn appContext.documents.executeSELECTQuery( agentsURI, query ).then( ( [ results, response ]:[ SPARQL.SELECTResults.Class, HTTP.Response.Class ] ) => {\n\t\t\tif( typeof results.bindings[ 0 ] === \"undefined\" ) return 0;\n\t\t\treturn results.bindings[ 0 ][ \"count\" ];\n\t\t} );\n\t}\n\n\n\tpublic getDescendants( appContext:App.Context, roleID?:string ):Promise<PersistedRole.Class[]> {\n\t\tlet rolesURI:string = appContext.getBaseURI() + \"roles/\",\n\t\t\tquery:string = `\n\t\t\t\tSELECT ?parentRole ?childRole ?name\n\t\t\t\tWHERE{\n\t\t\t\t\t<${roleID}> <https://carbonldp.com/ns/v1/security#childRole>* ?childRole.\n\t\t\t\t\t?childRole <https://carbonldp.com/ns/v1/security#name> ?name.\n\t\t\t\t\t?childRole <https://carbonldp.com/ns/v1/security#parentRole> ?parentRole.\n\t\t\t\t}\n\t\t\t`;\n\n\t\treturn appContext.documents.executeSELECTQuery( rolesURI, query ).then( ( [ results, response ]:[ SPARQL.SELECTResults.Class, HTTP.Response.Class ] ) => {\n\t\t\tlet roles:PersistedRole.Class[] = [];\n\t\t\tresults.bindings.forEach( ( rolePointer:SPARQL.SELECTResults.BindingObject ) => {\n\t\t\t\tlet role:Role.Class = Role.Factory.createFrom( { id: rolePointer[ \"childRole\" ][ \"id\" ] }, <string>rolePointer[ \"name\" ] );\n\t\t\t\trole[ \"parentRole\" ] = rolePointer[ \"parentRole\" ];\n\t\t\t\troles.push( <PersistedRole.Class>role );\n\t\t\t} );\n\t\t\treturn roles;\n\t\t} );\n\t}\n\n\tpublic getChildren( appContext:App.Context, roleID?:string ):Promise<PersistedRole.Class[]> {\n\t\tlet rolesURI:string = appContext.getBaseURI() + \"roles/\",\n\t\t\tfilter:string = ! ! roleID ? `EXISTS { ?role <${NS.CS.Predicate.parentRole}> <${roleID}> }` : `NOT EXISTS { ?role <${NS.CS.Predicate.parentRole}> ?parentRole } `,\n\t\t\tquery:string = `\n\t\t\t\tSELECT ?role ?name ?parentRole ?childRole\n\t\t\t\tWHERE{\n\t\t\t\t  GRAPH ?role { \n\t\t\t\t    ?role a <https://carbonldp.com/ns/v1/security#AppRole> .\n\t\t\t\t\t?role <https://carbonldp.com/ns/v1/security#name> ?name .\n\t\t\t\t\tOPTIONAL { ?role <https://carbonldp.com/ns/v1/security#parentRole> ?parentRole } .\n\t\t\t\t  }\n\t\t\t\t  BIND( EXISTS { GRAPH ?role { ?role <https://carbonldp.com/ns/v1/security#childRole> ?childRole } } as ?childRole)\n\t\t\t\t  FILTER( ${filter} )\n\t\t\t\t}`;\n\t\treturn appContext.documents.executeSELECTQuery( rolesURI, query ).then( ( [ results, response ]:[ SPARQL.SELECTResults.Class, HTTP.Response.Class ] ) => {\n\t\t\tlet roles:PersistedRole.Class[] = [];\n\t\t\tresults.bindings.forEach( ( rolePointer:SPARQL.SELECTResults.BindingObject ) => {\n\t\t\t\tlet role:Role.Class = Role.Factory.createFrom( { id: rolePointer[ \"role\" ][ \"id\" ] }, <string>rolePointer[ \"name\" ] );\n\t\t\t\trole[ \"hasChildren\" ] = rolePointer[ \"childRole\" ];\n\t\t\t\troles.push( <PersistedRole.Class>role );\n\t\t\t} );\n\t\t\treturn roles;\n\t\t} );\n\t}\n\n\tprivate getSortedRoles( roles:PersistedRole.Class[], orderBy:string, ascending:boolean ):PersistedRole.Class[] {\n\t\treturn roles.sort( ( roleA, roleB ) => {\n\t\t\tif( typeof roleA[ orderBy ] === \"string\" ) {\n\t\t\t\tif( roleA[ orderBy ].toLowerCase() > roleB[ orderBy ].toLowerCase() ) return ascending ? - 1 : 1;\n\t\t\t\tif( roleA[ orderBy ].toLowerCase() < roleB[ orderBy ].toLowerCase() ) return ascending ? 1 : - 1;\n\t\t\t} else {\n\t\t\t\tif( roleA[ orderBy ] > roleB[ orderBy ] ) return ascending ? - 1 : 1;\n\t\t\t\tif( roleA[ orderBy ] < roleB[ orderBy ] ) return ascending ? 1 : - 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t} );\n\t}\n}\n\nexport default RolesService;"]}