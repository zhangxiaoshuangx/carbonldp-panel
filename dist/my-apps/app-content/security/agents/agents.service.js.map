{"version":3,"sources":["my-apps/app-content/security/agents/agents.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAWA;gBAKC,uBAAa,MAAa;oBACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,iBAAiB,GAAG,IAAI,GAAG,EAA6C,CAAC;gBAC/E,CAAC;gBAEM,8BAAM,GAAb,UAAe,UAAsB;oBACpC,IAAI,GAAG,GAAU,UAAU,CAAC,UAAU,EAAE,GAAG,SAAS,CAAC;oBACrD,IAAI,cAAc,GAAsC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAE,UAAU,CAAC,UAAU,EAAE,CAAE,CAAC;oBAC9G,cAAc,GAAG,OAAO,cAAc,KAAK,WAAW,GAAG,IAAI,GAAG,EAAgC,GAAG,cAAc,CAAC;oBAClH,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAwB,GAAG,CAAE,CAAC,IAAI,CAAE,UAAE,EAAgE;4BAA/D,cAAM,EAAE,gBAAQ;wBAC9F,MAAM,CAAC,MAAM,CAAE,UAAE,KAA0B,IAAM,OAAA,CAAE,cAAc,CAAC,GAAG,CAAE,KAAK,CAAC,EAAE,CAAE,EAAhC,CAAgC,CAAE;6BACjF,OAAO,CAAE,UAAE,KAA0B,IAAM,OAAA,cAAc,CAAC,GAAG,CAAE,KAAK,CAAC,EAAE,EAAE,KAAK,CAAE,EAArC,CAAqC,CAAE,CAAC;wBACrF,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAE,cAAc,CAAC,MAAM,EAAE,CAAE,CAAC;oBAChD,CAAC,CAAE,CAAC;gBACL,CAAC;gBAEM,iCAAS,GAAhB,UAAkB,UAAsB,EAAE,KAA0B;oBACnE,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;gBACrB,CAAC;gBAEM,2CAAmB,GAA1B,UAA4B,UAAsB,EAAE,KAA0B;oBAC7E,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;gBAC/B,CAAC;gBAEM,mCAAW,GAAlB,UAAoB,UAAsB,EAAE,KAAiB,EAAE,IAAY;oBAC1E,IAAI,MAAM,GAAgB,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC;oBACjD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAE,KAAK,EAAE,IAAI,CAAE,CAAC;gBACvC,CAAC;gBAEM,mCAAW,GAAlB,UAAoB,UAAsB,EAAE,KAAiB,EAAE,IAAY;oBAC1E,IAAI,MAAM,GAAgB,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC;oBACjD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAE,KAAK,CAAC,EAAE,CAAE,CAAC;gBAClC,CAAC;gBAtCF;oBAAC,iBAAU,EAAE;;iCAAA;gBAuCb,oBAAC;YAAD,CAtCA,AAsCC,IAAA;YAtCD,yCAsCC,CAAA;YAED,oBAAe,aAAa,EAAC","file":"agents.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\n\nimport Carbon from \"carbonldp/Carbon\";\nimport * as App from \"carbonldp/App\";\nimport * as Agent from \"carbonldp/Auth/Agent\";\nimport * as Agents from \"carbonldp/Auth/Agents\";\nimport * as PersistedAgent from \"carbonldp/Auth/PersistedAgent\";\nimport * as HTTP from \"carbonldp/HTTP\";\nimport * as Utils from \"carbonldp/Utils\";\n\n@Injectable()\nexport class AgentsService {\n\n\tprivate carbon:Carbon;\n\tpublic appContextsAgents:Map<string, Map<string, PersistedAgent.Class>>;\n\n\tconstructor( carbon:Carbon ) {\n\t\tthis.carbon = carbon;\n\t\tthis.appContextsAgents = new Map<string, Map<string, PersistedAgent.Class>>();\n\t}\n\n\tpublic getAll( appContext:App.Context ):Promise<PersistedAgent.Class[]> {\n\t\tlet uri:string = appContext.getBaseURI() + \"agents/\";\n\t\tlet existingAgents:Map <string, PersistedAgent.Class> = this.appContextsAgents.get( appContext.getBaseURI() );\n\t\texistingAgents = typeof existingAgents === \"undefined\" ? new Map<string, PersistedAgent.Class>() : existingAgents;\n\t\treturn this.carbon.documents.getChildren<PersistedAgent.Class>( uri ).then( ( [agents, response]:[PersistedAgent.Class[], HTTP.Response.Class] ) => {\n\t\t\tagents.filter( ( agent:PersistedAgent.Class ) => ! existingAgents.has( agent.id ) )\n\t\t\t\t.forEach( ( agent:PersistedAgent.Class ) => existingAgents.set( agent.id, agent ) );\n\t\t\treturn Utils.A.from( existingAgents.values() );\n\t\t} );\n\t}\n\n\tpublic saveAgent( appContext:App.Context, agent:PersistedAgent.Class ):Promise<[PersistedAgent.Class, [HTTP.Response.Class,HTTP.Response.Class]]> {\n\t\treturn agent.save();\n\t}\n\n\tpublic saveAndRefreshAgent( appContext:App.Context, agent:PersistedAgent.Class ):Promise<[PersistedAgent.Class, [HTTP.Response.Class,HTTP.Response.Class]]> {\n\t\treturn agent.saveAndRefresh();\n\t}\n\n\tpublic createAgent( appContext:App.Context, agent:Agent.Class, slug?:string ):Promise<[PersistedAgent.Class, [HTTP.Response.Class,HTTP.Response.Class]]> {\n\t\tlet agents:Agents.Class = appContext.auth.agents;\n\t\treturn agents.register( agent, slug );\n\t}\n\n\tpublic deleteAgent( appContext:App.Context, agent:Agent.Class, slug?:string ):Promise<HTTP.Response.Class> {\n\t\tlet agents:Agents.Class = appContext.auth.agents;\n\t\treturn agents.delete( agent.id );\n\t}\n}\n\nexport default AgentsService;"]}