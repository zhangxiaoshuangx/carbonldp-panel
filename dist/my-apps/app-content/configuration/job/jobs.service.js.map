{"version":3,"sources":["my-apps/app-content/configuration/job/jobs.service.ts"],"names":[],"mappings":"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","file":"my-apps/app-content/configuration/job/jobs.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\n\nimport Carbon from \"carbonldp/Carbon\";\nimport * as App from \"carbonldp/App\";\nimport * as HTTP from \"carbonldp/HTTP\";\nimport * as Response from \"carbonldp/HTTP/Response\";\nimport * as PersistedDocument from \"carbonldp/PersistedDocument\";\nimport * as Utils from \"carbonldp/Utils\";\nimport * as Pointer from \"carbonldp/Pointer\";\n\nimport * as Job from \"./job\"\n\n@Injectable()\nexport class JobsService {\n\n\tcarbon:Carbon;\n\n\tjobs:Map<string, PersistedDocument.Class>;\n\n\tconstructor( carbon:Carbon ) {\n\t\tthis.carbon = carbon;\n\t\tthis.jobs = new Map<string, PersistedDocument.Class>();\n\t}\n\n\tgetJobOfType( type:string, appContext:App.Context ):Promise<PersistedDocument.Class> {\n\t\tif( ! type ) return <any> Promise.reject( new Error( \"Provide a job type.\" ) );\n\t\tif( ! appContext ) return <any> Promise.reject( new Error( \"Provide an appContext.\" ) );\n\t\tlet jobsArray:PersistedDocument.Class[] = Utils.A.from( this.jobs.values() );\n\t\tlet job:PersistedDocument.Class = jobsArray.find( ( job:PersistedDocument.Class ) => job.types.indexOf( type ) !== - 1 );\n\t\tif( ! ! job ) return Promise.resolve( job );\n\n\t\treturn this.getAll( appContext ).then(\n\t\t\t( jobs:PersistedDocument.Class[] )=> {\n\t\t\t\tlet jobsArray:PersistedDocument.Class[] = Utils.A.from( this.jobs.values() );\n\t\t\t\treturn jobsArray.find( ( job:PersistedDocument.Class ) => job.types.indexOf( type ) !== - 1 );\n\t\t\t}\n\t\t);\n\t}\n\n\tgetAll( appContext:App.Context ):Promise<PersistedDocument.Class[]> {\n\t\tlet uri:string = appContext.app.id + \"jobs/\";\n\t\treturn this.carbon.documents.getChildren( uri ).then( ( [jobs, response]:[PersistedDocument.Class[], HTTP.Response.Class] ) => {\n\t\t\tjobs.filter( ( job:PersistedDocument.Class ) => ! this.jobs.has( job.id ) )\n\t\t\t\t.forEach( ( job:PersistedDocument.Class ) => this.jobs.set( job.id, job ) );\n\t\t\treturn Utils.A.from( this.jobs.values() );\n\t\t} );\n\t}\n\n\tcreateExportBackup( appContext:App.Context ):Promise<PersistedDocument.Class> {\n\t\treturn new Promise<PersistedDocument.Class>(\n\t\t\t( resolve:( result:any ) => void, reject:( error:Error ) => void ) => {\n\t\t\t\tlet uri:string = appContext.app.id + \"jobs/\";\n\t\t\t\tlet tempJob:any = {};\n\t\t\t\ttempJob[ \"types\" ] = [ Job.Type.EXPORT_BACKUP ];\n\t\t\t\tappContext.documents.createChild( uri, tempJob ).then( ( [pointer, response]:[Pointer.Class, Response.Class] )=> {\n\t\t\t\t\tpointer.resolve().then( ( [importJob, response]:[PersistedDocument.Class, HTTP.Response.Class] )=> {\n\t\t\t\t\t\tresolve( importJob );\n\t\t\t\t\t\tthis.addJob( importJob );\n\t\t\t\t\t} );\n\t\t\t\t} ).catch( ( error )=> reject( error ) );\n\t\t\t}\n\t\t);\n\t}\n\n\tcreateImportBackup( backupURI:string, appContext:App.Context ):Promise<PersistedDocument.Class> {\n\t\tlet uri:string = appContext.app.id + \"jobs/\";\n\t\tlet tempJob:any = {};\n\t\ttempJob[ \"types\" ] = [ Job.Type.IMPORT_BACKUP ];\n\t\ttempJob[ Job.namespace + \"backup\" ] = appContext.documents.getPointer( backupURI );\n\n\t\treturn this.carbon.documents.createChild( uri, tempJob ).then( ( [pointer, response]:[Pointer.Class, Response.Class] ) => {\n\t\t\treturn pointer.resolve();\n\t\t} ).then( ( [importJob, response ]:[PersistedDocument.Class, HTTP.Response.Class] )=> {\n\t\t\tthis.addJob( importJob );\n\t\t\treturn importJob;\n\t\t} );\n\t}\n\n\trunJob( job:PersistedDocument.Class ):Promise<PersistedDocument.Class> {\n\t\tlet tempJob:any = {};\n\t\ttempJob[ \"types\" ] = [ Job.namespace + \"Execution\" ];\n\t\treturn this.carbon.documents.createChild( job.id, tempJob ).then( ( [pointer, response]:[Pointer.Class, Response.Class] )=> {\n\t\t\treturn pointer.resolve();\n\t\t} ).then( ( [importJob, response]:[PersistedDocument.Class, HTTP.Response.Class] )=> {\n\t\t\treturn importJob;\n\t\t} );\n\t}\n\n\tcheckJobExecution( jobExecution:PersistedDocument.Class ):Promise<PersistedDocument.Class> {\n\t\tif( jobExecution.isResolved() ) {\n\t\t\treturn jobExecution.refresh().then(\n\t\t\t\t( [resolvedJobExecution, response]:[PersistedDocument.Class, HTTP.Response.Class] )=> {\n\t\t\t\t\treturn resolvedJobExecution;\n\t\t\t\t} ).catch( ( error )=> { return Promise.reject( error ) } );\n\t\t} else {\n\t\t\treturn this.carbon.documents.get( jobExecution.id ).then(\n\t\t\t\t( [resolvedJobExecution, response]:[PersistedDocument.Class, HTTP.Response.Class] )=> {\n\t\t\t\t\treturn resolvedJobExecution;\n\t\t\t\t} ).catch( ( error )=> { return Promise.reject( error ) } );\n\t\t}\n\t}\n\n\tprivate addJob( job:PersistedDocument.Class ):void {\n\t\tthis.jobs.set( job.id, job );\n\t}\n}\n\nexport default JobsService;"],"sourceRoot":"/source/"}