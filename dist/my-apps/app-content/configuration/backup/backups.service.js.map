{"version":3,"sources":["my-apps/app-content/configuration/backup/backups.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAWA;gBAIC,wBAAa,MAAa;oBACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,uBAAuB,EAAE,CAAC;gBAChC,CAAC;gBAED,+BAAM,GAAN,UAAQ,IAAS,EAAE,UAA2B;oBAA9C,iBAOC;oBANA,IAAI,GAAG,GAAwB,UAAW,CAAC,GAAG,CAAC,EAAE,GAAG,UAAU,CAAC;oBAC/D,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAE,GAAG,EAAE,IAAI,CAAE,CAAC,IAAI,CAAE,UAAE,EAA8E;4BAA7E,6BAAqB,EAAE,sBAAc;wBAC9F,MAAM,CAAC,KAAI,CAAC,qBAAqB,CAAE,qBAAqB,CAAE,CAAC,IAAI,CAAE,UAAE,EAAiD;4BACnH,MAAM,CAAC,CAAE,qBAAqB,EAAE,cAAc,CAAE,CAAC;wBAClD,CAAC,CAAE,CAAC;oBACL,CAAC,CAAE,CAAC;gBACL,CAAC;gBAED,+BAAM,GAAN,UAAQ,UAA2B;oBAClC,IAAI,GAAG,GAAwB,UAAW,CAAC,GAAG,CAAC,EAAE,GAAG,UAAU,CAAC;oBAC/D,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAE,GAAG,CAAE,CAAC,IAAI,CAAE,UAAE,EAAoE;4BAAnE,eAAO,EAAE,gBAAQ;wBACzE,MAAM,CAAC,CAAE,OAAO,EAAE,QAAQ,CAAE,CAAC;oBAC9B,CAAC,CAAE,CAAC;gBACL,CAAC;gBAED,uCAAc,GAAd,UAAgB,WAAkB;oBACjC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAE,WAAW,CAAE,CAAC,IAAI,CAAE,UAAE,mBAA0B;wBAC5F,MAAM,CAAC,mBAAmB,CAAC;oBAC5B,CAAC,CAAE,CAAC;gBACL,CAAC;gBAED,+BAAM,GAAN,UAAQ,GAAU,EAAE,UAA2B;oBAC9C,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAE,GAAG,CAAE,CAAC;gBAC3C,CAAC;gBAEO,8CAAqB,GAA7B,UAA+B,aAA2B;oBACzD,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,IAAI,CAAE,UAAE,EAAyE;4BAAxE,sBAAc,EAAE,gBAAQ;wBAC/D,cAAc,CAAC,uBAAuB,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,CAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,CAAE,CAAC;wBAC7F,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;oBAC9B,CAAC,CAAE,CAAC;gBACL,CAAC;gBAEO,gDAAuB,GAA/B;oBACC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAE;wBAC/B,KAAK,EAAE,mCAAmC;wBAC1C,gBAAgB,EAAE;4BACjB,KAAK,EAAE,qDAAqD;4BAC5D,OAAO,EAAE,YAAY;yBACrB;qBACD,CAAE,CAAC;gBACL,CAAC;gBAnDF;oBAAC,iBAAU,EAAE;;kCAAA;gBAoDb,qBAAC;YAAD,CAnDA,AAmDC,IAAA;YAnDD,2CAmDC,CAAA;YAED,oBAAe,cAAc,EAAC","file":"backups.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\n\r\nimport Carbon from \"carbonldp/Carbon\";\r\nimport * as App from \"carbonldp/App\";\r\nimport * as HTTP from \"carbonldp/HTTP\";\r\nimport * as SDKContext from \"carbonldp/SDKContext\";\r\nimport * as PersistedDocument from \"carbonldp/PersistedDocument\";\r\nimport * as Pointer from \"carbonldp/Pointer\";\r\nimport * as NS from \"carbonldp/NS\";\r\n\r\n@Injectable()\r\nexport class BackupsService {\r\n\r\n\tcarbon:Carbon;\r\n\r\n\tconstructor( carbon:Carbon ) {\r\n\t\tthis.carbon = carbon;\r\n\t\tthis.extendSchemasForBackups();\r\n\t}\r\n\r\n\tupload( file:Blob, appContext:SDKContext.Class ):Promise<[ Pointer.Class, HTTP.Response.Class ]> {\r\n\t\tlet uri:string = (<App.Context>appContext).app.id + \"backups/\";\r\n\t\treturn this.carbon.documents.upload( uri, file ).then( ( [uploadedBackupPointer, uploadResponse]:[ Pointer.Class, HTTP.Response.Class ] )=> {\r\n\t\t\treturn this.convertToNonRDFSource( uploadedBackupPointer ).then( ( []:[PersistedDocument.Class, HTTP.Response.Class] )=> {\r\n\t\t\t\treturn [ uploadedBackupPointer, uploadResponse ];\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\tgetAll( appContext:SDKContext.Class ):Promise<[PersistedDocument.Class[], HTTP.Response.Class]> {\r\n\t\tlet uri:string = (<App.Context>appContext).app.id + \"backups/\";\r\n\t\treturn this.carbon.documents.getChildren( uri ).then( ( [backups, response]:[PersistedDocument.Class[], HTTP.Response.Class] ) => {\r\n\t\t\treturn [ backups, response ];\r\n\t\t} );\r\n\t}\r\n\r\n\tgetDownloadURL( documentURI:string ):Promise<string> {\r\n\t\treturn this.carbon.documents.getDownloadURL( documentURI ).then( ( documentDownloadURI:string ) => {\r\n\t\t\treturn documentDownloadURI;\r\n\t\t} );\r\n\t}\r\n\r\n\tdelete( uri:string, appContext:SDKContext.Class ):Promise<HTTP.Response.Class> {\r\n\t\treturn appContext.documents.delete( uri );\r\n\t}\r\n\r\n\tprivate convertToNonRDFSource( backupPointer:Pointer.Class ):Promise<[PersistedDocument.Class, HTTP.Response.Class]> {\r\n\t\treturn backupPointer.resolve().then( ( [backupDocument, response]:[PersistedDocument.Class, HTTP.Response.Class] )=> {\r\n\t\t\tbackupDocument.defaultInteractionModel = Pointer.Factory.create( NS.LDP.Class.NonRDFSource );\r\n\t\t\treturn backupDocument.save();\r\n\t\t} );\r\n\t}\r\n\r\n\tprivate extendSchemasForBackups():void {\r\n\t\tthis.carbon.extendObjectSchema( {\r\n\t\t\t\"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\r\n\t\t\t\"fileIdentifier\": {\r\n\t\t\t\t\"@id\": \"https://carbonldp.com/ns/v1/platform#fileIdentifier\",\r\n\t\t\t\t\"@type\": \"xsd:string\"\r\n\t\t\t},\r\n\t\t} );\r\n\t}\r\n}\r\n\r\nexport default BackupsService;\r\n"]}