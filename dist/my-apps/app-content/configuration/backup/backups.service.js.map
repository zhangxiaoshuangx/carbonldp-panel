{"version":3,"sources":["my-apps/app-content/configuration/backup/backups.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAE3C,uBAAmB,kBAAkB,CAAC,CAAA;AAKtC,IAAY,OAAO,WAAM,mBAAmB,CAAC,CAAA;AAC7C,IAAY,EAAE,WAAM,cAAc,CAAC,CAAA;AAGnC;IAIC,wBAAa,MAAa;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,uBAAuB,EAAE,CAAC;IAChC,CAAC;IAED,+BAAM,GAAN,UAAQ,IAAS,EAAE,UAA2B;QAA9C,iBAOC;QANA,IAAI,GAAG,GAAwB,UAAW,CAAC,GAAG,CAAC,EAAE,GAAG,UAAU,CAAC;QAC/D,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAE,GAAG,EAAE,IAAI,CAAE,CAAC,IAAI,CAAE,UAAE,EAAgF;gBAA9E,6BAAqB,EAAE,sBAAc;YAC/F,MAAM,CAAC,KAAI,CAAC,qBAAqB,CAAE,qBAAqB,CAAE,CAAC,IAAI,CAAE,UAAE,EAAmD;gBACrH,MAAM,CAAC,CAAE,qBAAqB,EAAE,cAAc,CAAE,CAAC;YAClD,CAAC,CAAE,CAAC;QACL,CAAC,CAAE,CAAC;IACL,CAAC;IAED,+BAAM,GAAN,UAAQ,UAA2B;QAClC,IAAI,GAAG,GAAwB,UAAW,CAAC,GAAG,CAAC,EAAE,GAAG,UAAU,CAAC;QAC/D,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAE,GAAG,CAAE,CAAC,IAAI,CAAE,UAAE,EAAwE;gBAAtE,eAAO,EAAE,gBAAQ;YAC1E,MAAM,CAAC,CAAE,OAAO,EAAE,QAAQ,CAAE,CAAC;QAC9B,CAAC,CAAE,CAAC;IACL,CAAC;IAED,uCAAc,GAAd,UAAgB,WAAkB;QACjC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAE,WAAW,CAAE,CAAC,IAAI,CAAE,UAAE,mBAA0B;YAC5F,MAAM,CAAC,mBAAmB,CAAC;QAC5B,CAAC,CAAE,CAAC;IACL,CAAC;IAED,+BAAM,GAAN,UAAQ,GAAU,EAAE,UAA2B;QAC9C,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAE,GAAG,CAAE,CAAC;IAC3C,CAAC;IAEO,8CAAqB,GAA7B,UAA+B,aAA2B;QACzD,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,IAAI,CAAE,UAAE,EAA6E;gBAA3E,sBAAc,EAAE,gBAAQ;YAChE,cAAc,CAAC,uBAAuB,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,CAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,CAAE,CAAC;YAC7F,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;QAC9B,CAAC,CAAE,CAAC;IACL,CAAC;IAEO,gDAAuB,GAA/B;QACC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAE;YAC/B,KAAK,EAAE,mCAAmC;YAC1C,gBAAgB,EAAE;gBACjB,KAAK,EAAE,qDAAqD;gBAC5D,OAAO,EAAE,YAAY;aACrB;SACD,CAAE,CAAC;IACL,CAAC;IAnDF;QAAC,iBAAU,EAAE;;sBAAA;IAoDb,qBAAC;AAAD,CAnDA,AAmDC,IAAA;AAnDY,sBAAc,iBAmD1B,CAAA;AAED;kBAAe,cAAc,CAAC","file":"backups.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\n\nimport Carbon from \"carbonldp/Carbon\";\nimport * as App from \"carbonldp/App\";\nimport * as HTTP from \"carbonldp/HTTP\";\nimport * as SDKContext from \"carbonldp/SDKContext\";\nimport * as PersistedDocument from \"carbonldp/PersistedDocument\";\nimport * as Pointer from \"carbonldp/Pointer\";\nimport * as NS from \"carbonldp/NS\";\n\n@Injectable()\nexport class BackupsService {\n\n\tcarbon:Carbon;\n\n\tconstructor( carbon:Carbon ) {\n\t\tthis.carbon = carbon;\n\t\tthis.extendSchemasForBackups();\n\t}\n\n\tupload( file:Blob, appContext:SDKContext.Class ):Promise<[ Pointer.Class, HTTP.Response.Class ]> {\n\t\tlet uri:string = (<App.Context>appContext).app.id + \"backups/\";\n\t\treturn this.carbon.documents.upload( uri, file ).then( ( [ uploadedBackupPointer, uploadResponse ]:[ Pointer.Class, HTTP.Response.Class ] ) => {\n\t\t\treturn this.convertToNonRDFSource( uploadedBackupPointer ).then( ( []:[ PersistedDocument.Class, HTTP.Response.Class ] ) => {\n\t\t\t\treturn [ uploadedBackupPointer, uploadResponse ];\n\t\t\t} );\n\t\t} );\n\t}\n\n\tgetAll( appContext:SDKContext.Class ):Promise<[ PersistedDocument.Class[], HTTP.Response.Class ]> {\n\t\tlet uri:string = (<App.Context>appContext).app.id + \"backups/\";\n\t\treturn this.carbon.documents.getChildren( uri ).then( ( [ backups, response ]:[ PersistedDocument.Class[], HTTP.Response.Class ] ) => {\n\t\t\treturn [ backups, response ];\n\t\t} );\n\t}\n\n\tgetDownloadURL( documentURI:string ):Promise<string> {\n\t\treturn this.carbon.documents.getDownloadURL( documentURI ).then( ( documentDownloadURI:string ) => {\n\t\t\treturn documentDownloadURI;\n\t\t} );\n\t}\n\n\tdelete( uri:string, appContext:SDKContext.Class ):Promise<HTTP.Response.Class> {\n\t\treturn appContext.documents.delete( uri );\n\t}\n\n\tprivate convertToNonRDFSource( backupPointer:Pointer.Class ):Promise<[ PersistedDocument.Class, HTTP.Response.Class ]> {\n\t\treturn backupPointer.resolve().then( ( [ backupDocument, response ]:[ PersistedDocument.Class, HTTP.Response.Class ] ) => {\n\t\t\tbackupDocument.defaultInteractionModel = Pointer.Factory.create( NS.LDP.Class.NonRDFSource );\n\t\t\treturn backupDocument.save();\n\t\t} );\n\t}\n\n\tprivate extendSchemasForBackups():void {\n\t\tthis.carbon.extendObjectSchema( {\n\t\t\t\"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n\t\t\t\"fileIdentifier\": {\n\t\t\t\t\"@id\": \"https://carbonldp.com/ns/v1/platform#fileIdentifier\",\n\t\t\t\t\"@type\": \"xsd:string\"\n\t\t\t},\n\t\t} );\n\t}\n}\n\nexport default BackupsService;\n"]}