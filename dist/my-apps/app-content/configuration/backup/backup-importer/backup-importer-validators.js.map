{"version":3,"sources":["my-apps/app-content/configuration/backup/backup-importer/backup-importer-validators.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;YAQA;gBAAA;gBAcA,CAAC;gBAVA,yCAAW,GAAX,UAAa,OAAqB;oBACjC,IAAI,CAAC,cAAc,GAAG,OAAO,CAAE,gBAAgB,CAAE,CAAC,YAAY,CAAC;oBAC/D,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAE,KAAK,EAAE,IAAI,CAAE,CAAC;gBAC5D,CAAC;gBAED,sCAAQ,GAAR,UAAU,OAAuB;oBAChC,EAAE,CAAA,CAAE,CAAE,CAAE,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,KAAK,iBAAkB,CAAC;wBAAC,MAAM,CAAC,IAAI,CAAC;oBAC5F,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,cAAe,CAAC;wBAAC,MAAM,CAAC,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC;oBAC/D,MAAM,CAAC,EAAE,yBAAyB,EAAE,IAAI,EAAE,CAAC;gBAC5C,CAAC;gBAZD;oBAAC,YAAK,EAAE;;2EAAA;gBACR;oBAAC,YAAK,EAAE;;oEAAA;gBAPT;oBAAC,gBAAS,CAAE;wBACX,QAAQ,EAAE,kBAAkB;wBAC5B,SAAS,EAAE,CAAE,EAAE,OAAO,EAAE,qBAAa,EAAE,WAAW,EAAE,mBAAmB,EAAE,KAAK,EAAE,IAAI,EAAE,CAAE;qBACxF,CAAE;;uCAAA;gBAgBH,0BAAC;YAAD,CAdA,AAcC,IAAA;YAdD,qDAcC,CAAA;YAED,gIAAgI;YAKhI;gBAAA;gBAQA,CAAC;gBANA,2CAAQ,GAAR,UAAU,SAAmB;oBAC5B,GAAG,CAAA,CAAE,IAAI,OAAO,IAAI,SAAS,CAAC,QAAS,CAAC,CAAC,CAAC;wBACzC,EAAE,CAAA,CAAE,CAAE,CAAE,SAAS,CAAC,QAAQ,CAAE,OAAO,CAAE,CAAC,KAAM,CAAC;4BAAC,MAAM,CAAC,IAAI,CAAC;oBAC3D,CAAC;oBACD,MAAM,CAAC,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC;gBAChC,CAAC;gBAXF;oBAAC,gBAAS,CAAE;wBACX,QAAQ,EAAE,wBAAwB;wBAClC,SAAS,EAAE,CAAE,EAAE,OAAO,EAAE,qBAAa,EAAE,WAAW,EAAE,wBAAwB,EAAE,KAAK,EAAE,IAAI,EAAE,CAAE;qBAC7F,CAAE;;4CAAA;gBASH,+BAAC;YAAD,CARA,AAQC,IAAA;YARD,+DAQC,CAAA","file":"backup-importer-validators.js","sourcesContent":["import { Directive, Input, OnChanges, SimpleChanges } from \"@angular/core\";\nimport { AbstractControl, Validator, NG_VALIDATORS, FormGroup } from \"@angular/forms\";\n\n@Directive( {\n\tselector: \"[cp-backup-file]\",\n\tproviders: [ { provide: NG_VALIDATORS, useExisting: BackupFileValidator, multi: true } ]\n} )\n\nexport class BackupFileValidator implements Validator, OnChanges {\n\t@Input() backupFileBlob;\n\t@Input() control;\n\n\tngOnChanges( changes:SimpleChanges ) {\n\t\tthis.backupFileBlob = changes[ \"backupFileBlob\" ].currentValue;\n\t\tthis.control.control.updateValueAndValidity( false, true );\n\t}\n\n\tvalidate( control:AbstractControl ):any {\n\t\tif( ! ! this.backupFileBlob && this.backupFileBlob.type === \"application/zip\" ) return null;\n\t\tif( ! this.backupFileBlob ) return { \"emptyBackupFile\": true };\n\t\treturn { \"invalidBackupFileFormat\": true };\n\t}\n}\n\n// Checks all controls. If at least one is valid, then no errors are found, if none are valid then \"invalidForm\" error is added.\n@Directive( {\n\tselector: \"[cp-import-form-valid]\",\n\tproviders: [ { provide: NG_VALIDATORS, useExisting: AtLeastOneValidValidator, multi: true } ]\n} )\nexport class AtLeastOneValidValidator implements Validator {\n\n\tvalidate( formGroup:FormGroup ):{ [key:string]:any; } {\n\t\tfor( let control in formGroup.controls ) {\n\t\t\tif( ! ! formGroup.controls[ control ].valid ) return null;\n\t\t}\n\t\treturn { \"invalidForm\": true };\n\t}\n}"]}