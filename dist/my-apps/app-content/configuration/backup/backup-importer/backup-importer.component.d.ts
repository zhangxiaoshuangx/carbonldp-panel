import { ElementRef, OnInit, OnDestroy } from "@angular/core";
import { FormBuilder, ControlGroup, AbstractControl } from "@angular/common";
import * as App from "carbonldp/App";
import * as PersistedDocument from "carbonldp/PersistedDocument";
import { BackupsService } from "../backups.service";
import { JobsService } from "../../job/jobs.service";
import { Message } from "./../../../../../errors-area/error-message.component";
import "semantic-ui/semantic";
export declare class BackupImporterComponent implements OnInit, OnDestroy {
    element: ElementRef;
    $element: JQuery;
    $importForm: JQuery;
    $backups: JQuery;
    monitorExecutionInterval: number;
    formBuilder: FormBuilder;
    importForm: ControlGroup;
    uri: AbstractControl;
    backup: AbstractControl;
    backupFile: AbstractControl;
    backupFileBlob: Blob;
    backups: PersistedDocument.Class[];
    backupsService: BackupsService;
    jobsService: JobsService;
    appContext: App.Context;
    running: ImportStatus;
    uploading: ImportStatus;
    creating: ImportStatus;
    executing: ImportStatus;
    errorMessages: Message[];
    errorMessage: Message;
    constructor(element: ElementRef, formBuilder: FormBuilder, backupsService: BackupsService, jobsService: JobsService);
    ngOnInit(): void;
    getBackups(): void;
    onImportBackup(): void;
    executeImport(importJob: PersistedDocument.Class): Promise<PersistedDocument.Class>;
    monitorExecution(importJobExecution: PersistedDocument.Class): Promise<PersistedDocument.Class>;
    ngOnDestroy(): void;
    private checkImportJobExecution(importJobExecution);
    onFileChange(event: any): void;
    onInputLostFocus(event: FocusEvent): void;
    enableAllInputs(): void;
    uriValidator(uri: AbstractControl): any;
    existingBackupValidator(existingBackup: AbstractControl): any;
    backupFileValidator(backupFile: AbstractControl): any;
    importFormValidator(importForm: ControlGroup): any;
    canDisplayImportButtonLoading(): boolean;
    uploadBackup(file: Blob): void;
    createBackupImport(backupURI: string): Promise<any>;
    finishImport(): void;
    checkForFailedTasks(): boolean;
    removeMessage(index: number): void;
}
export declare class ImportStatus {
    private _active;
    private _done;
    private _failed;
    private _succeed;
    active: boolean;
    done: boolean;
    failed: boolean;
    succeed: boolean;
    start(): void;
    finish(): void;
    fail(): void;
    success(): void;
}
export default BackupImporterComponent;
