{"version":3,"sources":["my-apps/app-content/app-content.resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAUA;gBAQC,4BAAa,MAAa,EAAE,KAAoB,EAAE,iBAAmC,EAAE,iBAAmC;oBACzH,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;oBAC5B,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;oBAC3C,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;gBAC5C,CAAC;gBAGD,oCAAO,GAAP,UAAS,KAA4B;oBAArC,iBAWC;oBAVA,IAAI,IAAI,GAAU,KAAK,CAAC,MAAM,CAAE,MAAM,CAAE,CAAC;oBACzC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAE,IAAI,CAAE,CAAC,IAAI,CAAE,UAAE,UAA4B;wBAC7E,IAAI,GAAG,GAAa,GAAG,CAAC,OAAO,CAAC,UAAU,CAAE,UAAU,CAAE,CAAC;wBACzD,KAAI,CAAC,iBAAiB,CAAC,SAAS,GAAG,GAAG,CAAC;wBACvC,MAAM,CAAC,GAAG,CAAC;oBACZ,CAAC,CAAE,CAAC,KAAK,CAAE,UAAE,KAAS;wBACrB,OAAO,CAAC,KAAK,CAAE,KAAK,CAAE,CAAC;wBACvB,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAE,CAAE,SAAS,EAAE,eAAe,CAAE,CAAE,CAAC;wBACvD,MAAM,CAAC,KAAK,CAAC;oBACd,CAAC,CAAE,CAAC;gBACL,CAAC;gBA5BF;oBAAC,iBAAU,EAAE;;sCAAA;gBA6Bb,yBAAC;YAAD,CA5BA,AA4BC,IAAA;YA5BD,mDA4BC,CAAA","file":"app-content.resolver.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, Resolve, ActivatedRoute, ActivatedRouteSnapshot } from '@angular/router';\n\nimport * as CarbonApp from \"carbonldp/App\";\nimport * as App from \"./app\";\n\nimport { AppContextService } from \"./../app-context.service\";\nimport { AppContentService } from \"./app-content.service\";\n\n@Injectable()\nexport class AppContentResolver implements Resolve<App.Class> {\n\n\tprivate router:Router;\n\tprivate activatedRoute:ActivatedRoute;\n\tprivate appContextService:AppContextService;\n\tprivate appContentService:AppContentService;\n\n\n\tconstructor( router:Router, route:ActivatedRoute, appContextService:AppContextService, appContentService:AppContentService ) {\n\t\tthis.router = router;\n\t\tthis.activatedRoute = route;\n\t\tthis.appContextService = appContextService;\n\t\tthis.appContentService = appContentService;\n\t}\n\n\n\tresolve( route:ActivatedRouteSnapshot ):Promise<App.Class> | App.Class {\n\t\tlet slug:string = route.params[ \"slug\" ];\n\t\treturn this.appContextService.get( slug ).then( ( appContext:CarbonApp.Context ) => {\n\t\t\tlet app:App.Class = App.Factory.createFrom( appContext );\n\t\t\tthis.appContentService.activeApp = app;\n\t\t\treturn app;\n\t\t} ).catch( ( error:any ):boolean => {\n\t\t\tconsole.error( error );\n\t\t\tthis.router.navigate( [ \"my-apps\", \"app-not-found\" ] );\n\t\t\treturn false;\n\t\t} );\n\t}\n}"]}