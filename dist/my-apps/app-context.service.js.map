{"version":3,"sources":["my-apps/app-context.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAQA;gBAKC,2BAAa,MAAa;oBACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,EAAuB,CAAC;gBACnD,CAAC;gBAED,+BAAG,GAAH,UAAK,IAAW;oBAAhB,iBAoBC;oBAnBA,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAE,IAAI,CAAE,CAAC;oBACxC,MAAM,CAAC,IAAI,OAAO,CAAe,UAAE,OAA8B,EAAE,MAA8B;wBAChG,EAAE,CAAA,CAAE,KAAI,CAAC,WAAW,CAAC,GAAG,CAAE,IAAI,CAAG,CAAC,CAAC,CAAC;4BACnC,OAAO,CAAE,KAAI,CAAC,WAAW,CAAC,GAAG,CAAE,IAAI,CAAE,CAAE,CAAC;4BACxC,MAAM,CAAC;wBACR,CAAC;wBAED,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAE,IAAI,GAAG,GAAG,CAAE,CAAC,IAAI,CAC7C,UAAE,UAAsB;4BACvB,KAAI,CAAC,WAAW,CAAC,GAAG,CAAE,IAAI,EAAE,UAAU,CAAE,CAAC;4BACzC,OAAO,CAAE,UAAU,CAAE,CAAC;wBACvB,CAAC,CACD,CAAC,KAAK,CACN,UAAE,KAAK;4BACN,OAAO,CAAC,GAAG,CAAE,KAAK,CAAE,CAAC;4BACrB,MAAM,CAAE,KAAK,CAAE,CAAC;wBACjB,CAAC,CACD,CAAC;oBACH,CAAC,CAAE,CAAC;gBACL,CAAC;gBAED,kCAAM,GAAN;oBAAA,iBAUC;oBATA,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,IAAI,CAAE,UAAE,WAAyB;wBACzE,KAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;wBACzB,WAAW;6BACT,OAAO,CAAE,UAAE,UAAsB;4BACjC,KAAI,CAAC,WAAW,CAAC,GAAG,CAAE,KAAI,CAAC,OAAO,CAAE,UAAU,CAAE,EAAE,UAAU,CAAE,CAAC;wBAChE,CAAC,CAAE,CAAC;wBAEL,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAE,KAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAE,CAAC;oBAClD,CAAC,CAAE,CAAC;gBACL,CAAC;gBAED,mCAAO,GAAP,UAAS,UAAsB;oBAC9B,IAAI,GAAG,GAAU,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;oBAEnC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAE,GAAG,CAAC,IAAI,CAAC,OAAO,CAAE,GAAG,CAAE,CAAE,CAAC;gBAC5D,CAAC;gBAEO,+CAAmB,GAA3B,UAA6B,IAAW;oBACvC,EAAE,CAAA,CAAE,IAAI,CAAC,QAAQ,CAAE,GAAG,CAAG,CAAC,CAAC,CAAC;wBAC3B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAE,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAE,CAAC;oBAC1C,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACP,MAAM,CAAC,IAAI,CAAC;oBACb,CAAC;gBACF,CAAC;gBAzDF;oBAAC,iBAAU,EAAE;;qCAAA;gBA0Db,wBAAC;;YAAD,CAzDA,AAyDC,IAAA;YAzDD,iDAyDC,CAAA;YAED,oBAAe,iBAAiB,EAAC","file":"my-apps/app-context.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\n\nimport Carbon from \"carbonldp/Carbon\";\nimport * as App from \"carbonldp/App\";\nimport * as URI from \"carbonldp/RDF/URI\";\nimport * as Utils from \"carbonldp/Utils\";\n\n@Injectable()\nexport class AppContextService {\n\n\tcarbon:Carbon;\n\tappContexts:Map<string, App.Context>;\n\n\tconstructor( carbon:Carbon ) {\n\t\tthis.carbon = carbon;\n\t\tthis.appContexts = new Map<string, App.Context>();\n\t}\n\n\tget( slug:string ):Promise<App.Context> {\n\t\tslug = this.removeTrailingSlash( slug );\n\t\treturn new Promise<App.Context>( ( resolve:( result:any ) => void, reject:( error:Error ) => void ) => {\n\t\t\tif( this.appContexts.has( slug ) ) {\n\t\t\t\tresolve( this.appContexts.get( slug ) );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.carbon.apps.getContext( slug + \"/\" ).then(\n\t\t\t\t( appContext:App.Context ) => {\n\t\t\t\t\tthis.appContexts.set( slug, appContext );\n\t\t\t\t\tresolve( appContext );\n\t\t\t\t}\n\t\t\t).catch(\n\t\t\t\t( error ) => {\n\t\t\t\t\tconsole.log( error );\n\t\t\t\t\treject( error );\n\t\t\t\t}\n\t\t\t);\n\t\t} );\n\t}\n\n\tgetAll():Promise<App.Context[]> {\n\t\treturn this.carbon.apps.getAllContexts().then( ( appContexts:App.Context[] ) => {\n\t\t\tthis.appContexts.clear();\n\t\t\tappContexts\n\t\t\t\t.forEach( ( appContext:App.Context ) => {\n\t\t\t\t\tthis.appContexts.set( this.getSlug( appContext ), appContext );\n\t\t\t\t} );\n\n\t\t\treturn Utils.A.from( this.appContexts.values() );\n\t\t} );\n\t}\n\n\tgetSlug( appContext:App.Context ):string {\n\t\tlet uri:string = appContext.app.id;\n\n\t\treturn this.removeTrailingSlash( URI.Util.getSlug( uri ) );\n\t}\n\n\tprivate removeTrailingSlash( slug:string ):string {\n\t\tif( slug.endsWith( \"/\" ) ) {\n\t\t\treturn slug.substr( 0, slug.length - 1 );\n\t\t} else {\n\t\t\treturn slug;\n\t\t}\n\t}\n}\n\nexport default AppContextService;\n"],"sourceRoot":"/source/"}