{"version":3,"sources":["directives/input-validation.directive.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAGA;;;;;;;;;;;;;;;;;;;eAmBG;YAKH;gBA0BC,kCAAyC,OAAe;oBAAf,YAAO,GAAP,OAAO,CAAQ;oBALxD,iDAAiD;oBAEzC,aAAQ,GAAW,KAAK,CAAC;oBACzB,eAAU,GAAW,KAAK,CAAC;gBAEyB,CAAC;gBAzB7D,sBAAI,6CAAO;yBAAX;wBACC,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,OAAQ,CAAC;4BAAC,MAAM,CAAC,IAAI,CAAC;wBACjC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;oBAC7B,CAAC;;;mBAAA;gBAED,sBAAI,2CAAK;yBAAT;wBACC,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,OAAQ,CAAC;4BAAC,MAAM,CAAC,IAAI,CAAC;wBACjC,MAAM,CAAC,CAAE,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAE,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;oBACtH,CAAC;;;mBAAA;gBAED,sBAAI,6CAAO;yBAAX;wBACC,MAAM,CAAC,CAAE,IAAI,CAAC,KAAK,CAAC;oBACrB,CAAC;;;mBAAA;gBAED,sBAAI,4CAAM;yBAAV;wBACC,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,OAAQ,CAAC;4BAAC,MAAM,CAAC,EAAE,CAAC;wBAE/B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;oBAC5B,CAAC;;;mBAAA;gBAUD,0CAAO,GAAP;oBACC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;oBACrB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACxB,CAAC;gBAGD,yCAAM,GAAN;oBACC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACvB,CAAC;gBATD;oBAAC,mBAAY,CAAE,OAAO,EAAE,CAAE,QAAQ,CAAE,CAAE;;;;uEAAA;gBAMtC;oBAAC,mBAAY,CAAE,MAAM,EAAE,CAAE,QAAQ,CAAE,CAAE;;;;sEAAA;gBAtCtC;oBAAC,gBAAS,CAAE;wBACX,QAAQ,EAAE,yBAAyB;wBACnC,QAAQ,EAAE,cAAc;qBACxB,CAAE;+BA2BY,eAAQ,EAAE;+BAAE,WAAI,EAAE;;4CA3B9B;gBAuCH,+BAAC;YAAD,CAtCA,AAsCC,IAAA;YAtCD,+DAsCC,CAAA;YAED,oBAAe,wBAAwB,EAAC","file":"input-validation.directive.js","sourcesContent":["import { Directive, HostListener, Optional, Host } from \"@angular/core\";\r\nimport { NgModel, AbstractControl } from \"@angular/forms\";\r\n\r\n/**\r\n * This directive gives you a valid state that takes into consideration the user's interaction with the control.\r\n * The \"valid\" state will be true on the following conditions:\r\n * <ul>\r\n *     <li>If the user hasn't focused the control</li>\r\n *     <li>If the control has focus</li>\r\n *     <li>If the control is valid (based on ngModel validations)</li>\r\n * </ul>\r\n * The intention is to simplify error conditions that would require too much logic instead.\r\n *\r\n * @example\r\n * <input [ngModel]=\"email\" cpValidation #email=\"cpValidation\" [class.error]=\"! email.valid\">\r\n *\r\n * <div class=\"error-message\" *ngIf=\"! email.valid\">\r\n *     <ul>\r\n *         <li *ngIf=\"email.control.hasError( 'required' )\">Please provide an email address</li>\r\n *         <li *ngIf=\"email.control.hasError( 'email' )\">Please provide a valid email address</li>\r\n *     </ul>\r\n * </div>\r\n */\r\n@Directive( {\r\n\tselector: \"[cpValidation][ngModel]\",\r\n\texportAs: \"cpValidation\",\r\n} )\r\nexport class InputValidationDirective {\r\n\tget control():AbstractControl {\r\n\t\tif( ! this.ngModel ) return null;\r\n\t\treturn this.ngModel.control;\r\n\t}\r\n\r\n\tget valid():boolean {\r\n\t\tif( ! this.ngModel ) return true;\r\n\t\treturn ! this.ngModel.touched || this.hasFocus || ! this.wasFocused || this.ngModel.valid || this.ngModel.isDisabled;\r\n\t}\r\n\r\n\tget invalid():boolean {\r\n\t\treturn ! this.valid;\r\n\t}\r\n\r\n\tget errors():{ [ key:string ]:any } {\r\n\t\tif( ! this.ngModel ) return {};\r\n\r\n\t\treturn this.ngModel.errors;\r\n\t}\r\n\r\n\t// TODO: Make other ngModel properties accessible\r\n\r\n\tprivate hasFocus:boolean = false;\r\n\tprivate wasFocused:boolean = false;\r\n\r\n\tconstructor( @Optional() @Host() private ngModel:NgModel ) {}\r\n\r\n\t@HostListener( \"focus\", [ \"$event\" ] )\r\n\tonFocus():void {\r\n\t\tthis.hasFocus = true;\r\n\t\tthis.wasFocused = true;\r\n\t}\r\n\r\n\t@HostListener( \"blur\", [ \"$event\" ] )\r\n\tonBlur():void {\r\n\t\tthis.hasFocus = false;\r\n\t}\r\n}\r\n\r\nexport default InputValidationDirective;"]}