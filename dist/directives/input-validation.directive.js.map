{"version":3,"sources":["directives/input-validation.directive.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,sCAAwE;AACxE,wCAA0D;AAE1D;;;;;;;;;;;;;;;;;;;GAmBG;AAKH,IAAa,wBAAwB;IA0BpC,kCAAyC,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;QALxD,iDAAiD;QAEzC,aAAQ,GAAW,KAAK,CAAC;QACzB,eAAU,GAAW,KAAK,CAAC;IAEyB,CAAC;IAzB7D,sBAAI,6CAAO;aAAX;YACC,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,OAAQ,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC;YACjC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;QAC7B,CAAC;;;OAAA;IAED,sBAAI,2CAAK;aAAT;YACC,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,OAAQ,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC;YACjC,MAAM,CAAC,CAAE,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAE,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;QACtH,CAAC;;;OAAA;IAED,sBAAI,6CAAO;aAAX;YACC,MAAM,CAAC,CAAE,IAAI,CAAC,KAAK,CAAC;QACrB,CAAC;;;OAAA;IAED,sBAAI,4CAAM;aAAV;YACC,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,OAAQ,CAAC;gBAAC,MAAM,CAAC,EAAE,CAAC;YAE/B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QAC5B,CAAC;;;OAAA;IAUD,0CAAO,GAAP;QACC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IACxB,CAAC;IAGD,yCAAM,GAAN;QACC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACvB,CAAC;IACF,+BAAC;AAAD,CAtCA,AAsCC,IAAA;AATA;IADC,mBAAY,CAAE,OAAO,EAAE,CAAE,QAAQ,CAAE,CAAE;;;;uDAIrC;AAGD;IADC,mBAAY,CAAE,MAAM,EAAE,CAAE,QAAQ,CAAE,CAAE;;;;sDAGpC;AArCW,wBAAwB;IAJpC,gBAAS,CAAE;QACX,QAAQ,EAAE,yBAAyB;QACnC,QAAQ,EAAE,cAAc;KACxB,CAAE;IA2BY,WAAA,eAAQ,EAAE,CAAA,EAAE,WAAA,WAAI,EAAE,CAAA;qCAAiB,eAAO;GA1B5C,wBAAwB,CAsCpC;AAtCY,4DAAwB;;AAwCrC,kBAAe,wBAAwB,CAAC","file":"input-validation.directive.js","sourcesContent":["import { Directive, HostListener, Optional, Host } from \"@angular/core\";\nimport { NgModel, AbstractControl } from \"@angular/forms\";\n\n/**\n * This directive gives you a valid state that takes into consideration the user's interaction with the control.\n * The \"valid\" state will be true on the following conditions:\n * <ul>\n *     <li>If the user hasn't focused the control</li>\n *     <li>If the control has focus</li>\n *     <li>If the control is valid (based on ngModel validations)</li>\n * </ul>\n * The intention is to simplify error conditions that would require too much logic instead.\n *\n * @example\n * <input [ngModel]=\"email\" cpValidation #email=\"cpValidation\" [class.error]=\"! email.valid\">\n *\n * <div class=\"error-message\" *ngIf=\"! email.valid\">\n *     <ul>\n *         <li *ngIf=\"email.control.hasError( 'required' )\">Please provide an email address</li>\n *         <li *ngIf=\"email.control.hasError( 'email' )\">Please provide a valid email address</li>\n *     </ul>\n * </div>\n */\n@Directive( {\n\tselector: \"[cpValidation][ngModel]\",\n\texportAs: \"cpValidation\",\n} )\nexport class InputValidationDirective {\n\tget control():AbstractControl {\n\t\tif( ! this.ngModel ) return null;\n\t\treturn this.ngModel.control;\n\t}\n\n\tget valid():boolean {\n\t\tif( ! this.ngModel ) return true;\n\t\treturn ! this.ngModel.touched || this.hasFocus || ! this.wasFocused || this.ngModel.valid || this.ngModel.isDisabled;\n\t}\n\n\tget invalid():boolean {\n\t\treturn ! this.valid;\n\t}\n\n\tget errors():{ [ key:string ]:any } {\n\t\tif( ! this.ngModel ) return {};\n\n\t\treturn this.ngModel.errors;\n\t}\n\n\t// TODO: Make other ngModel properties accessible\n\n\tprivate hasFocus:boolean = false;\n\tprivate wasFocused:boolean = false;\n\n\tconstructor( @Optional() @Host() private ngModel:NgModel ) {}\n\n\t@HostListener( \"focus\", [ \"$event\" ] )\n\tonFocus():void {\n\t\tthis.hasFocus = true;\n\t\tthis.wasFocused = true;\n\t}\n\n\t@HostListener( \"blur\", [ \"$event\" ] )\n\tonBlur():void {\n\t\tthis.hasFocus = false;\n\t}\n}\n\nexport default InputValidationDirective;"]}