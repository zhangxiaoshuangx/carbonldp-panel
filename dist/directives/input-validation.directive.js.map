{"version":3,"sources":["directives/input-validation.directive.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAGA;;;;;;;;;;;;;;;;;;;eAmBG;YAKH;gBAcC,kCAAyC,OAAe;oBAAf,YAAO,GAAP,OAAO,CAAQ;oBAHhD,aAAQ,GAAW,KAAK,CAAC;oBACzB,eAAU,GAAW,KAAK,CAAC;gBAEyB,CAAC;gBAb7D,sBAAI,6CAAO;yBAAX;wBACC,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,OAAQ,CAAC;4BAAC,MAAM,CAAC,IAAI,CAAC;wBACjC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;oBAC7B,CAAC;;;mBAAA;gBAED,sBAAI,2CAAK;yBAAT;wBACC,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,OAAQ,CAAC;4BAAC,MAAM,CAAC,IAAI,CAAC;wBACjC,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAE,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;oBACjE,CAAC;;;mBAAA;gBAQD,0CAAO,GAAP;oBACC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;oBACrB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACxB,CAAC;gBAGD,yCAAM,GAAN;oBACC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACvB,CAAC;gBATD;oBAAC,mBAAY,CAAE,OAAO,EAAE,CAAE,QAAQ,CAAE,CAAE;;;;uEAAA;gBAMtC;oBAAC,mBAAY,CAAE,MAAM,EAAE,CAAE,QAAQ,CAAE,CAAE;;;;sEAAA;gBA1BtC;oBAAC,gBAAS,CAAE;wBACX,QAAQ,EAAE,+DAA+D;wBACzE,QAAQ,EAAE,cAAc;qBACxB,CAAE;+BAeY,eAAQ,EAAE;+BAAE,WAAI,EAAE;;4CAf9B;gBA2BH,+BAAC;YAAD,CA1BA,AA0BC,IAAA;YA1BD,+DA0BC,CAAA;YAED,oBAAe,wBAAwB,EAAC","file":"input-validation.directive.js","sourcesContent":["import { Directive, HostListener, Optional, Host } from \"@angular/core\";\nimport { NgModel, AbstractControl } from \"@angular/forms\";\n\n/**\n * This directive gives you a valid state that takes into consideration the user's interaction with the control.\n * The \"valid\" state will be true on the following conditions:\n * <ul>\n *     <li>If the user hasn't focused the control</li>\n *     <li>If the control has focus</li>\n *     <li>If the control is valid (based on ngModel validations)</li>\n * </ul>\n * The intention is to simplify error conditions that would require too much logic instead.\n *\n * @example\n * <input [ngModel]=\"email\" cpValidation #email=\"cpValidation\" [class.error]=\"! email.valid\">\n *\n * <div class=\"error-message\" *ngIf=\"! email.valid\">\n *     <ul>\n *         <li *ngIf=\"email.control.hasError( 'required' )\">Please provide an email address</li>\n *         <li *ngIf=\"email.control.hasError( 'email' )\">Please provide a valid email address</li>\n *     </ul>\n * </div>\n */\n@Directive( {\n\tselector: \"input[cpValidation][ngModel], textarea[cpValidation][ngModel]\",\n\texportAs: \"cpValidation\",\n} )\nexport class InputValidationDirective {\n\tget control():AbstractControl {\n\t\tif( ! this.ngModel ) return null;\n\t\treturn this.ngModel.control;\n\t}\n\n\tget valid():boolean {\n\t\tif( ! this.ngModel ) return true;\n\t\treturn this.hasFocus || ! this.wasFocused || this.ngModel.valid;\n\t}\n\n\tprivate hasFocus:boolean = false;\n\tprivate wasFocused:boolean = false;\n\n\tconstructor( @Optional() @Host() private ngModel:NgModel ) {}\n\n\t@HostListener( \"focus\", [ \"$event\" ] )\n\tonFocus():void {\n\t\tthis.hasFocus = true;\n\t\tthis.wasFocused = true;\n\t}\n\n\t@HostListener( \"blur\", [ \"$event\" ] )\n\tonBlur():void {\n\t\tthis.hasFocus = false;\n\t}\n}\n\nexport default InputValidationDirective;"]}