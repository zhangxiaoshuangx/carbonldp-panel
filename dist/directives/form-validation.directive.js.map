{"version":3,"sources":["directives/form-validation.directive.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;YASA;gBA4BC,iCAAyC,MAAa;oBAAb,WAAM,GAAN,MAAM,CAAO;gBAAI,CAAC;gBAzB3D,sBAAI,0CAAK;yBAAT;wBACC,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,MAAO,CAAC;4BAAC,MAAM,CAAC,IAAI,CAAC;wBAEhC,IAAI,WAAW,GAAuB,EAAE,CAAC;wBAEzC,GAAG,CAAC,CAAE,IAAI,WAAW,IAAI,IAAI,CAAC,MAAM,CAAC,QAAS,CAAC,CAAC,CAAC;4BAChD,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAE,WAAW,CAAG,CAAC;gCAAC,QAAQ,CAAC;4BACpE,WAAW,CAAC,IAAI,CAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAE,WAAW,CAAE,CAAE,CAAC;wBACzD,CAAC;wBAED,EAAE,CAAA,CAAE,IAAI,CAAC,gBAAiB,CAAC,CAAC,CAAC;4BAC5B,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAE,UAAE,UAAmC;gCACnE,IAAI,KAAK,GAAU,WAAW,CAAC,OAAO,CAAE,UAAU,CAAC,OAAO,CAAE,CAAC;gCAC7D,EAAE,CAAA,CAAE,KAAK,KAAK,CAAE,CAAE,CAAC;oCAAC,MAAM,CAAC;gCAE3B,WAAW,CAAC,MAAM,CAAE,KAAK,EAAE,CAAC,EAAE,UAAU,CAAE,CAAC;4BAC5C,CAAC,CAAE,CAAC;wBACL,CAAC;wBAED,IAAI,gBAAgB,GAAqB,WAAW,CAAC,IAAI,CAAE,UAAE,UAA4B;4BACxF,MAAM,CAAC,CAAE,UAAU,CAAC,KAAK,CAAC;wBAC3B,CAAC,CAAE,CAAC;wBACJ,MAAM,CAAC,OAAO,gBAAgB,KAAK,WAAW,CAAC;oBAChD,CAAC;;;mBAAA;gBAzBD;oBAAC,sBAAe,CAAE,qDAAwB,CAAE;;iFAAA;gBAL7C;oBAAC,gBAAS,CAAE;wBACX,QAAQ,EAAE,oBAAoB;wBAC9B,QAAQ,EAAE,cAAc;qBACxB,CAAE;+BA6BY,eAAQ,EAAE;+BAAE,WAAI,EAAE;;2CA7B9B;gBA8BH,8BAAC;YAAD,CA7BA,AA6BC,IAAA;YA7BD,6DA6BC,CAAA;YAED,oBAAe,uBAAuB,EAAC","file":"form-validation.directive.js","sourcesContent":["import { Directive, Optional, Host, ContentChildren, QueryList } from \"@angular/core\";\nimport { NgForm, NgModel } from \"@angular/forms\";\n\nimport { InputValidationDirective } from \"./input-validation.directive\";\n\n@Directive( {\n\tselector: \"form[cpValidation]\",\n\texportAs: \"cpValidation\",\n} )\nexport class FormValidationDirective {\n\t@ContentChildren( InputValidationDirective ) inputValidations:QueryList<InputValidationDirective>;\n\n\tget valid():boolean {\n\t\tif( ! this.ngForm ) return true;\n\n\t\tlet validations:{ valid:boolean }[] = [];\n\n\t\tfor ( let controlName in this.ngForm.controls ) {\n\t\t\tif( ! this.ngForm.controls.hasOwnProperty( controlName ) ) continue;\n\t\t\tvalidations.push( this.ngForm.controls[ controlName ] );\n\t\t}\n\n\t\tif( this.inputValidations ) {\n\t\t\tthis.inputValidations.forEach( ( validation:InputValidationDirective ) => {\n\t\t\t\tlet index:number = validations.indexOf( validation.control );\n\t\t\t\tif( index === - 1 ) return;\n\n\t\t\t\tvalidations.splice( index, 1, validation );\n\t\t\t} );\n\t\t}\n\n\t\tlet failedValidation:{ valid:boolean } = validations.find( ( validation:{ valid:boolean } ) => {\n\t\t\treturn ! validation.valid;\n\t\t} );\n\t\treturn typeof failedValidation === \"undefined\";\n\t}\n\n\tconstructor( @Optional() @Host() private ngForm:NgForm ) {}\n}\n\nexport default FormValidationDirective;"]}