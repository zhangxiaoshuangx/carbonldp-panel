{"version":3,"sources":["router.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,0CAAyC;AACzC,sCAA2C;AAE3C;;;;;;;;;;;;GAYG;AAEH,IAAa,aAAa;IAGzB,uBAAa,MAAa;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACtB,CAAC;IAED,gCAAQ,GAAR,UAAU,MAAe,EAAE,KAAoB;QAApB,sBAAA,EAAA,YAAoB;QAC9C,IAAI,SAAS,GAAU,EAAE,CAAC;QAC1B,EAAE,CAAA,CAAE,OAAO,MAAM,KAAK,QAAS,CAAC,CAAC,CAAC;YACjC,SAAS,GAAG,MAAM,CAAC;QACpB,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,MAAM,CAAC,OAAO,CAAE,UAAE,KAAY,EAAE,GAAU;gBACzC,SAAS,IAAI,KAAK,CAAC;gBACnB,EAAE,CAAA,CAAE,GAAG,KAAK,MAAM,CAAC,MAAM,GAAG,CAAE,CAAC;oBAAC,SAAS,IAAI,GAAG,CAAC;YAClD,CAAC,CAAE,CAAC;QACL,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAE,SAAS,EAAE,KAAK,CAAE,CAAC;IACjD,CAAC;IACF,oBAAC;AAAD,CAnBA,AAmBC,IAAA;AAnBY,aAAa;IADzB,iBAAU,EAAE;qCAIQ,eAAM;GAHd,aAAa,CAmBzB;AAnBY,sCAAa;;AAqB1B,kBAAe,aAAa,CAAC","file":"router.service.js","sourcesContent":["import { Router } from \"@angular/router\";\nimport { Injectable } from \"@angular/core\";\n\n/**\n * Service that wraps router related functionality. This service must not be automatically injected,\n * because we need a different instance each time we inject it into a component (not a singleton).\n * Instead use a factory like:\n * <pre><code>\n *      provide( RouterService, {\n *          useFactory: ( router:Router ):RouterService => {\n *              return new RouterService( router );\n *          },\n *          deps: [ Router ]\n *      })\n * </pre></code>\n */\n@Injectable()\nexport class RouterService {\n\tprivate router:Router;\n\n\tconstructor( router:Router ) {\n\t\tthis.router = router;\n\t}\n\n\tisActive( routes:string[], exact:boolean = true ):boolean {\n\t\tlet fullRoute:string = \"\";\n\t\tif( typeof routes === \"string\" ) {\n\t\t\tfullRoute = routes;\n\t\t} else {\n\t\t\troutes.forEach( ( value:string, idx:number ) => {\n\t\t\t\tfullRoute += value;\n\t\t\t\tif( idx !== routes.length - 1 ) fullRoute += \"/\";\n\t\t\t} );\n\t\t}\n\t\treturn this.router.isActive( fullRoute, exact );\n\t}\n}\n\nexport default RouterService;"]}