{"version":3,"sources":["router.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;YAGA;;;;;;;;;;;;eAYG;YAEH;gBAGC,uBAAa,MAAa;oBACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACtB,CAAC;gBAED,gCAAQ,GAAR,UAAU,MAAe,EAAE,KAAoB;oBAApB,qBAAoB,GAApB,YAAoB;oBAC9C,IAAI,SAAS,GAAU,EAAE,CAAC;oBAC1B,EAAE,CAAA,CAAE,OAAO,MAAM,KAAK,QAAS,CAAC,CAAC,CAAC;wBACjC,SAAS,GAAG,MAAM,CAAC;oBACpB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACP,MAAM,CAAC,OAAO,CAAE,UAAE,KAAY,EAAE,GAAU;4BACzC,SAAS,IAAI,KAAK,CAAC;4BACnB,EAAE,CAAA,CAAE,GAAG,KAAK,MAAM,CAAC,MAAM,GAAG,CAAE,CAAC;gCAAA,SAAS,IAAI,GAAG,CAAC;wBACjD,CAAC,CAAE,CAAC;oBACL,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAE,SAAS,EAAE,KAAK,CAAE,CAAC;gBACjD,CAAC;gBAnBF;oBAAC,iBAAU,EAAE;;iCAAA;gBAoBb,oBAAC;YAAD,CAnBA,AAmBC,IAAA;YAnBD,yCAmBC,CAAA;YAED,oBAAe,aAAa,EAAC","file":"router.service.js","sourcesContent":["import { Router } from \"@angular/router\";\nimport { Injectable } from \"@angular/core\";\n\n/**\n * Service that wraps router related functionality. This service must not be automatically injected,\n * because we need a different instance each time we inject it into a component (not a singleton).\n * Instead use a factory like:\n * <pre><code>\n *      provide( RouterService, {\n *          useFactory: ( router:Router ):RouterService => {\n *              return new RouterService( router );\n *          },\n *          deps: [ Router ]\n *      })\n * </pre></code>\n */\n@Injectable()\nexport class RouterService {\n\tprivate router:Router;\n\n\tconstructor( router:Router ) {\n\t\tthis.router = router;\n\t}\n\n\tisActive( routes:string[], exact:boolean = true ):boolean {\n\t\tlet fullRoute:string = \"\";\n\t\tif( typeof routes === \"string\" ) {\n\t\t\tfullRoute = routes;\n\t\t} else {\n\t\t\troutes.forEach( ( value:string, idx:number )=> {\n\t\t\t\tfullRoute += value;\n\t\t\t\tif( idx !== routes.length - 1 )fullRoute += \"/\";\n\t\t\t} );\n\t\t}\n\t\treturn this.router.isActive( fullRoute, exact );\n\t}\n}\n\nexport default RouterService;"],"sourceRoot":"/source/"}