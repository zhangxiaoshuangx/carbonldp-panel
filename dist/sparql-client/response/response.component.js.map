{"version":3,"sources":["sparql-client/response/response.component.ts"],"names":[],"mappings":"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","file":"sparql-client/response/response.component.js","sourcesContent":["import { Component, Input, Output, ElementRef, EventEmitter, AfterViewInit, OnInit } from \"@angular/core\";\n\nimport * as CodeMirrorComponent from \"carbon-panel/code-mirror/code-mirror.component\";\n//import { ResultsetTableComponent } from \"../resultset-table/resultset-table.component\";\n\nimport $ from \"jquery\";\nimport \"semantic-ui/semantic\";\n\nimport template from \"./response.component.html!\";\nimport style from \"./response.component.css!text\";\n\n@Component( {\n\tselector: \"cp-sparql-response\",\n\tstyles: [ style ],\n\t//directives: [ CodeMirrorComponent.Class, ResultsetTableComponent ],\n\ttemplate: template,\n} )\nexport class ResponseComponent implements AfterViewInit, OnInit {\n\telement:ElementRef;\n\t$element:JQuery;\n\n\t@Input() outputformat:string;\n\t@Input() response:SPARQLClientResponse;\n\t@Input() prefixes:{ [ prefix:string ]:string };\n\n\t@Output() onRemove:EventEmitter<SPARQLClientResponse> = new EventEmitter<SPARQLClientResponse>();\n\t@Output() onConfigure:EventEmitter<SPARQLClientResponse> = new EventEmitter<SPARQLClientResponse>();\n\t@Output() onReExecute:EventEmitter<SPARQLClientResponse> = new EventEmitter<SPARQLClientResponse>();\n\n\tsparqlFormats:SPARQLFormats = SPARQLFormats;\n\n\tget codeMirrorMode():typeof CodeMirrorComponent.Mode { return CodeMirrorComponent.Mode; }\n\n\taccordion:any;\n\taccordionOpen:boolean = true;\n\tmenu:any;\n\n\tget responseType():typeof SPARQLResponseType { return SPARQLResponseType; }\n\n\tconstructor( element:ElementRef ) {\n\t\tthis.element = element;\n\t}\n\n\tngOnInit():void {\n\t\tthis.outputformat = this.response.query.format;\n\t\tlet format:string = this.getCodeMirrorMode( this.response.query.format );\n\t\tthis.outputformat = ! ! format ? format : this.outputformat;\n\t}\n\n\tngAfterViewInit():void {\n\t\tthis.$element = $( this.element.nativeElement );\n\t\tthis.accordion = this.$element.find( \".accordion\" );\n\t\tthis.accordion.accordion( {\n\t\t\tonOpen: this.onOpen.bind( this ),\n\t\t\tonClose: this.onClose.bind( this ),\n\t\t} );\n\t\tthis.menu = this.$element.find( \".content .tabular.menu > .item\" );\n\t\tthis.menu.tab( {\n\t\t\tcontext: this.$element.find( \".tabs\" ),\n\t\t\tchildrenOnly: true,\n\t\t\tonLoad: this.onLoadTab.bind( this ),\n\t\t} );\n\t\tthis.openAccordion();\n\t}\n\n\ttoggleAccordion():void {\n\t\tthis.accordion.accordion( \"toggle\" );\n\t}\n\n\topenAccordion():void {\n\t\tthis.accordion.accordion( \"open\", 0 );\n\t}\n\n\tonRemoveResponse( event:any ):void {\n\t\tthis.onRemove.emit( this.response );\n\t\tevent.stopPropagation();\n\t}\n\n\tonOpen():void {\n\t\tthis.accordionOpen = true;\n\t\tthis.$element.find( \".CodeMirror\" ).each( ( i:number, element:Element ):void => {\n\t\t\telement.CodeMirror.refresh();\n\t\t} );\n\t}\n\n\tonClose():void {\n\t\tthis.accordionOpen = false;\n\t}\n\n\tonLoadTab():void {\n\t\tthis.$element.find( \".CodeMirror\" ).each( ( i:number, element:Element ):void => {\n\t\t\telement.CodeMirror.refresh();\n\t\t} );\n\t}\n\n\tonConfigureResponse( event:any ):void {\n\t\tthis.onConfigure.emit( this.response );\n\t\tevent.stopPropagation();\n\t}\n\n\tonReExecuteResponse( event:any ):void {\n\t\tthis.onReExecute.emit( this.response );\n\t\tthis.accordion.accordion( \"open\", 0 );\n\t\tevent.stopPropagation();\n\t}\n\n\tgetCodeMirrorMode( format:string ):string {\n\t\tswitch( format ) {\n\t\t\tcase SPARQLFormats.csv:\n\t\t\t\treturn CodeMirrorComponent.Mode.CSV;\n\t\t\tcase SPARQLFormats.xml:\n\t\t\t\treturn CodeMirrorComponent.Mode.XML;\n\t\t\tcase SPARQLFormats.jsonLD:\n\t\t\t\treturn CodeMirrorComponent.Mode.JSONLD;\n\t\t\tcase SPARQLFormats.jsonRDF:\n\t\t\t\treturn CodeMirrorComponent.Mode.JSONDRDF;\n\t\t\tcase SPARQLFormats.n3:\n\t\t\t\treturn CodeMirrorComponent.Mode.N3;\n\t\t\tcase SPARQLFormats.rdfXML:\n\t\t\t\treturn CodeMirrorComponent.Mode.RDFXML;\n\t\t\tcase SPARQLFormats.tsv:\n\t\t\t\treturn CodeMirrorComponent.Mode.TSV;\n\t\t\tcase SPARQLFormats.turtle:\n\t\t\t\treturn CodeMirrorComponent.Mode.TURTLE;\n\t\t\tcase SPARQLFormats.boolean:\n\t\t\t\treturn CodeMirrorComponent.Mode.JAVASCRIPT;\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n}\nexport class SPARQLResponseType {\n\tstatic success:string = \"success\";\n\tstatic default:string = \"default\";\n\tstatic error:string = \"error\";\n}\n\nexport class SPARQLFormats {\n\tstatic table:string = \"table\";\n\tstatic xml:string = \"application/xml\";\n\tstatic csv:string = \"text/csv\";\n\tstatic tsv:string = \"text/tsv\";\n\tstatic jsonLD:string = \"application/ld+json\";\n\tstatic turtle:string = \"text/turtle\";\n\tstatic jsonRDF:string = \"application/rdf+json\";\n\tstatic rdfXML:string = \"application/rdf+xml\";\n\tstatic n3:string = \"text/n3\";\n\tstatic ntriples:string = \"text/plain\";\n\tstatic trix:string = \"application/trix\";\n\tstatic trig:string = \"application/x-trig\";\n\tstatic binary:string = \"application/x-binary-rdf.\";\n\tstatic nquads:string = \"text/x-nquads\";\n\tstatic rdfa:string = \"application/xhtml+xml\";\n\tstatic boolean:string = \"boolean\";\n\tstatic text:string = \"text/plain\";\n}\n\nexport interface SPARQLQuery {\n\tendpoint:string;\n\ttype:string;\n\tcontent:string;\n\toperation:string;\n\tformat:string;\n\tname:string;\n\tid:number;\n}\n\nexport class SPARQLClientResponse {\n\tduration:number = null;\n\tresultset:any = null;\n\tquery:SPARQLQuery = null;\n\tresult:string = null;\n\tisReExecuting:boolean = false;\n\tdata:string = null;\n\n\tsetData( data:any ):void {\n\t\tif( typeof data !== \"string\" ) {\n\t\t\tdata = JSON.stringify( data, null, 2 );\n\t\t}\n\t\tthis.data = data;\n\t}\n}\n"],"sourceRoot":"/source/"}