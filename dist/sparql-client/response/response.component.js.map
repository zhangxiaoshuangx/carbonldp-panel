{"version":3,"sources":["sparql-client/response/response.component.ts"],"names":[],"mappings":"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","file":"response.component.js","sourcesContent":["import { Component, Input, Output, ElementRef, EventEmitter, AfterViewInit, OnInit } from \"@angular/core\";\n\nimport * as CodeMirrorComponent from \"carbonldp-panel/code-mirror/code-mirror.component\";\n\nimport $ from \"jquery\";\nimport \"semantic-ui/semantic\";\n\n\n@Component( {\n\tselector: \"cp-sparql-response\",\n\ttemplate: require( \"./response.component.html\" ),\n\tstyles: [ require( \"./response.component.css\" ) ],\n} )\nexport class ResponseComponent implements AfterViewInit, OnInit {\n\telement:ElementRef;\n\t$element:JQuery;\n\n\t@Input() outputformat:string;\n\t@Input() response:SPARQLClientResponse;\n\t@Input() prefixes:{ [ prefix:string ]:string };\n\n\t@Output() onRemove:EventEmitter<SPARQLClientResponse> = new EventEmitter<SPARQLClientResponse>();\n\t@Output() onConfigure:EventEmitter<SPARQLClientResponse> = new EventEmitter<SPARQLClientResponse>();\n\t@Output() onReExecute:EventEmitter<SPARQLClientResponse> = new EventEmitter<SPARQLClientResponse>();\n\n\tsparqlFormats:SPARQLFormats = SPARQLFormats;\n\n\tget codeMirrorMode():typeof CodeMirrorComponent.Mode { return CodeMirrorComponent.Mode; }\n\n\taccordion:any;\n\taccordionOpen:boolean = true;\n\tmenu:any;\n\n\tget responseType():typeof SPARQLResponseType { return SPARQLResponseType; }\n\n\tconstructor( element:ElementRef ) {\n\t\tthis.element = element;\n\t}\n\n\tngOnInit():void {\n\t\tthis.outputformat = this.response.query.format;\n\t\tlet format:string = this.getCodeMirrorMode( this.response.query.format );\n\t\tthis.outputformat = ! ! format ? format : this.outputformat;\n\t}\n\n\tngAfterViewInit():void {\n\t\tthis.$element = $( this.element.nativeElement );\n\t\tthis.accordion = this.$element.find( \".accordion\" );\n\t\tthis.accordion.accordion( {\n\t\t\tonOpen: this.onOpen.bind( this ),\n\t\t\tonClose: this.onClose.bind( this ),\n\t\t} );\n\t\tthis.menu = this.$element.find( \".content .tabular.menu > .item\" );\n\t\tthis.menu.tab( {\n\t\t\tcontext: this.$element.find( \".tabs\" ),\n\t\t\tchildrenOnly: true,\n\t\t\tonLoad: this.onLoadTab.bind( this ),\n\t\t} );\n\t\tthis.openAccordion();\n\t}\n\n\ttoggleAccordion():void {\n\t\tthis.accordion.accordion( \"toggle\" );\n\t}\n\n\topenAccordion():void {\n\t\tthis.accordion.accordion( \"open\", 0 );\n\t}\n\n\tonRemoveResponse( event:any ):void {\n\t\tthis.onRemove.emit( this.response );\n\t\tevent.stopPropagation();\n\t}\n\n\tonOpen():void {\n\t\tthis.accordionOpen = true;\n\t\tthis.$element.find( \".CodeMirror\" ).each( ( i:number, element:Element ):void => {\n\t\t\telement.CodeMirror.refresh();\n\t\t} );\n\t}\n\n\tonClose():void {\n\t\tthis.accordionOpen = false;\n\t}\n\n\tonLoadTab():void {\n\t\tthis.$element.find( \".CodeMirror\" ).each( ( i:number, element:Element ):void => {\n\t\t\telement.CodeMirror.refresh();\n\t\t} );\n\t}\n\n\tonConfigureResponse( event:any ):void {\n\t\tthis.onConfigure.emit( this.response );\n\t\tevent.stopPropagation();\n\t}\n\n\tonReExecuteResponse( event:any ):void {\n\t\tthis.onReExecute.emit( this.response );\n\t\tthis.accordion.accordion( \"open\", 0 );\n\t\tevent.stopPropagation();\n\t}\n\n\tgetCodeMirrorMode( format:string ):string {\n\t\tswitch( format ) {\n\t\t\tcase SPARQLFormats.csv:\n\t\t\t\treturn CodeMirrorComponent.Mode.CSV;\n\t\t\tcase SPARQLFormats.xml:\n\t\t\t\treturn CodeMirrorComponent.Mode.XML;\n\t\t\tcase SPARQLFormats.jsonLD:\n\t\t\t\treturn CodeMirrorComponent.Mode.JSONLD;\n\t\t\tcase SPARQLFormats.jsonRDF:\n\t\t\t\treturn CodeMirrorComponent.Mode.JSONDRDF;\n\t\t\tcase SPARQLFormats.n3:\n\t\t\t\treturn CodeMirrorComponent.Mode.N3;\n\t\t\tcase SPARQLFormats.rdfXML:\n\t\t\t\treturn CodeMirrorComponent.Mode.RDFXML;\n\t\t\tcase SPARQLFormats.tsv:\n\t\t\t\treturn CodeMirrorComponent.Mode.TSV;\n\t\t\tcase SPARQLFormats.turtle:\n\t\t\t\treturn CodeMirrorComponent.Mode.TURTLE;\n\t\t\tcase SPARQLFormats.boolean:\n\t\t\t\treturn CodeMirrorComponent.Mode.JAVASCRIPT;\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n}\nexport class SPARQLResponseType {\n\tstatic success:string = \"success\";\n\tstatic default:string = \"default\";\n\tstatic error:string = \"error\";\n}\n\nexport class SPARQLFormats {\n\tstatic table:string = \"table\";\n\tstatic xml:string = \"application/xml\";\n\tstatic csv:string = \"text/csv\";\n\tstatic tsv:string = \"text/tsv\";\n\tstatic jsonLD:string = \"application/ld+json\";\n\tstatic turtle:string = \"text/turtle\";\n\tstatic jsonRDF:string = \"application/rdf+json\";\n\tstatic rdfXML:string = \"application/rdf+xml\";\n\tstatic n3:string = \"text/n3\";\n\tstatic ntriples:string = \"text/plain\";\n\tstatic trix:string = \"application/trix\";\n\tstatic trig:string = \"application/x-trig\";\n\tstatic binary:string = \"application/x-binary-rdf.\";\n\tstatic nquads:string = \"text/x-nquads\";\n\tstatic rdfa:string = \"application/xhtml+xml\";\n\tstatic boolean:string = \"boolean\";\n\tstatic text:string = \"text/plain\";\n}\n\nexport interface SPARQLQuery {\n\tendpoint:string;\n\ttype:string;\n\tcontent:string;\n\toperation:string;\n\tformat:string;\n\tname:string;\n\tid:number;\n}\n\nexport class SPARQLClientResponse {\n\tduration:number = null;\n\tresultset:any = null;\n\tquery:SPARQLQuery = null;\n\tresult:string = null;\n\tisReExecuting:boolean = false;\n\tdata:string = null;\n\n\tsetData( data:any ):void {\n\t\tif( typeof data !== \"string\" ) {\n\t\t\tdata = JSON.stringify( data, null, 2 );\n\t\t}\n\t\tthis.data = data;\n\t}\n}\n"]}