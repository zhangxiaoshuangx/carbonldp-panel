{"version":3,"sources":["sparql-client/sparql-client.component.ts"],"names":[],"mappings":"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","file":"sparql-client.component.js","sourcesContent":["import { Component, ElementRef, Input, Output, EventEmitter, OnInit, AfterViewInit } from \"@angular/core\";\n\nimport Carbon from \"carbonldp/Carbon\";\nimport Context from \"carbonldp/Context\";\nimport * as SPARQL from \"carbonldp/SPARQL\";\nimport * as HTTP from \"carbonldp/HTTP\";\n\nimport { SPARQLResponseType, SPARQLFormats, SPARQLClientResponse, SPARQLQuery } from \"./response/response.component\";\nimport * as CodeMirrorComponent from \"carbonldp-panel/code-mirror/code-mirror.component\";\n\nimport $ from \"jquery\";\nimport \"semantic-ui/semantic\";\n\nimport template from \"./sparql-client.component.html!\";\nimport style from \"./sparql-client.component.css!text\";\n\n\n@Component( {\n\tselector: \"cp-sparql-client\",\n\ttemplate: template,\n\tstyles: [ style ],\n} )\nexport class SPARQLClientComponent implements OnInit, AfterViewInit {\n\n\tsparqlTypes:SPARQLTypes = <SPARQLTypes>{\n\t\tquery: \"Query\",\n\t\tupdate: \"Update\",\n\t};\n\tsparqlQueryOperations:SPARQLQueryOperations = <SPARQLQueryOperations>{\n\t\tselect: {\n\t\t\tname: \"SELECT\",\n\t\t\tformats: [\n\t\t\t\t{ value: SPARQLFormats.table, name: \"Friendly Table\" },\n\t\t\t\t// {value: SPARQLFormats.xml, name: \"XML\"},\n\t\t\t\t// {value: SPARQLFormats.csv, name: \"CSV\"},\n\t\t\t\t// {value: SPARQLFormats.tsv, name: \"TSV\"},\n\t\t\t],\n\t\t},\n\t\tdescribe: {\n\t\t\tname: \"DESCRIBE\",\n\t\t\tformats: [\n\t\t\t\t{ value: SPARQLFormats.jsonLD, name: \"JSON-LD\" },\n\t\t\t\t{ value: SPARQLFormats.turtle, name: \"TURTLE\" },\n\t\t\t\t{ value: SPARQLFormats.jsonRDF, name: \"RDF/JSON\" },\n\t\t\t\t{ value: SPARQLFormats.rdfXML, name: \"RDF/XML\" },\n\t\t\t\t{ value: SPARQLFormats.n3, name: \"N3\" },\n\t\t\t],\n\t\t},\n\t\tconstruct: {\n\t\t\tname: \"CONSTRUCT\",\n\t\t\tformats: [\n\t\t\t\t{ value: SPARQLFormats.jsonLD, name: \"JSON-LD\" },\n\t\t\t\t{ value: SPARQLFormats.turtle, name: \"TURTLE\" },\n\t\t\t\t{ value: SPARQLFormats.jsonRDF, name: \"RDF/JSON\" },\n\t\t\t\t{ value: SPARQLFormats.rdfXML, name: \"RDF/XML\" },\n\t\t\t\t{ value: SPARQLFormats.n3, name: \"N3\" },\n\t\t\t],\n\t\t},\n\t\task: {\n\t\t\tname: \"ASK\",\n\t\t\tformats: [\n\t\t\t\t{ value: SPARQLFormats.boolean, name: \"Boolean\" },\n\t\t\t],\n\t\t},\n\t\tupdate: {\n\t\t\tname: \"UPDATE\",\n\t\t\tformats: [\n\t\t\t\t{ value: SPARQLFormats.text, name: \"Text\" },\n\t\t\t]\n\t\t},\n\t\tclear: {\n\t\t\tname: \"CLEAR\",\n\t\t\tformats: [\n\t\t\t\t{ value: SPARQLFormats.text, name: \"Text\" },\n\t\t\t]\n\t\t},\n\t\tinsert: {\n\t\t\tname: \"INSERT\",\n\t\t\tformats: [\n\t\t\t\t{ value: SPARQLFormats.text, name: \"Text\" },\n\t\t\t]\n\t\t},\n\t\t\"delete\": {\n\t\t\tname: \"DELETE\",\n\t\t\tformats: [\n\t\t\t\t{ value: SPARQLFormats.text, name: \"Text\" },\n\t\t\t]\n\t\t},\n\t\tdrop: {\n\t\t\tname: \"DROP\",\n\t\t\tformats: [\n\t\t\t\t{ value: SPARQLFormats.text, name: \"Text\" },\n\t\t\t]\n\t\t},\n\t\tload: {\n\t\t\tname: \"LOAD\",\n\t\t\tformats: [\n\t\t\t\t{ value: SPARQLFormats.text, name: \"Text\" },\n\t\t\t]\n\t\t},\n\t\tcreate: {\n\t\t\tname: \"CREATE\",\n\t\t\tformats: [\n\t\t\t\t{ value: SPARQLFormats.text, name: \"Text\" },\n\t\t\t]\n\t\t}\n\t};\n\n\tisQueryType:boolean = true;\n\tisSending:boolean = false;\n\tisSaving:boolean = false;\n\tisCarbonContext:boolean = false;\n\tresponses:SPARQLClientResponse[] = [];\n\n\n\tcurrentQuery:SPARQLQuery = <SPARQLQuery>{\n\t\tendpoint: \"\",\n\t\ttype: this.sparqlTypes.query,\n\t\tcontent: \"\",\n\t\toperation: null,\n\t\tformat: null,\n\t\tname: \"\",\n\t};\n\taskingQuery:SPARQLQuery = <SPARQLQuery>{\n\t\tendpoint: \"\",\n\t\ttype: this.sparqlTypes.query,\n\t\tcontent: \"\",\n\t\toperation: null,\n\t\tformat: null,\n\t\tname: \"\",\n\t};\n\tformatsAvailable:any = [];\n\tsavedQueries:SPARQLQuery[] = [];\n\tmessages:any[] = [];\n\n\t// Buttons\n\tbtnsGroupSaveQuery:JQuery;\n\tbtnSaveQuery:JQuery;\n\tbtnSave:JQuery;\n\tbtnSaveAs:JQuery;\n\t// Sidebar\n\tsidebar:JQuery;\n\t// Modals\n\treplaceQueryConfirmationModal:JQuery;\n\tdeleteQueryConfirmationModal:JQuery;\n\n\t// Regex\n\tregExpSelect:RegExp = new RegExp( \"((.|\\n)+)?SELECT((.|\\n)+)?\", \"i\" );\n\tregExpConstruct:RegExp = new RegExp( \"((.|\\n)+)?CONSTRUCT((.|\\n)+)?\", \"i\" );\n\tregExpAsk:RegExp = new RegExp( \"((.|\\n)+)?ASK((.|\\n)+)?\", \"i\" );\n\tregExpDescribe:RegExp = new RegExp( \"((.|\\n)+)?DESCRIBE((.|\\n)+)?\", \"i\" );\n\tregExpURL:RegExp = new RegExp( \"(https?:\\/\\/(?:www\\.|(?!www))[^\\s\\.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})\" );\n\tregExpInsert:RegExp = new RegExp( \"((.|\\n)+)?INSERT((.|\\n)+)?\", \"i\" );\n\tregExpDelete:RegExp = new RegExp( \"((.|\\n)+)?DELETE((.|\\n)+)?\", \"i\" );\n\tregExpClear:RegExp = new RegExp( \"((.|\\n)+)?CLEAR((.|\\n)+)?\", \"i\" );\n\tregExpCreate:RegExp = new RegExp( \"((.|\\n)+)?CREATE((.|\\n)+)?\", \"i\" );\n\tregExpDrop:RegExp = new RegExp( \"((.|\\n)+)?DROP((.|\\n)+)?\", \"i\" );\n\tregExpLoad:RegExp = new RegExp( \"((.|\\n)+)?LOAD((.|\\n)+)?\", \"i\" );\n\n\t// Inputs and Outputs\n\t@Input() context:Context;\n\t@Input() emitErrors:boolean = false;\n\t@Output() errorOccurs:EventEmitter<any> = new EventEmitter();\n\n\tprivate element:ElementRef;\n\t// TODO: Make them configurable\n\tprivate prefixes:{ [ prefix:string ]:string } = {\n\t\t\"acl\": \"http://www.w3.org/ns/auth/acl#\",\n\t\t\"api\": \"http://purl.org/linked-data/api/vocab#\",\n\t\t\"c\": \"https://carbonldp.com/ns/v1/platform#\",\n\t\t\"cs\": \"https://carbonldp.com/ns/v1/security#\",\n\t\t\"cp\": \"https://carbonldp.com/ns/v1/patch#\",\n\t\t\"cc\": \"http://creativecommons.org/ns#\",\n\t\t\"cert\": \"http://www.w3.org/ns/auth/cert#\",\n\t\t\"dbp\": \"http://dbpedia.org/property/\",\n\t\t\"dc\": \"http://purl.org/dc/terms/\",\n\t\t\"dc11\": \"http://purl.org/dc/elements/1.1/\",\n\t\t\"dcterms\": \"http://purl.org/dc/terms/\",\n\t\t\"doap\": \"http://usefulinc.com/ns/doap#\",\n\t\t\"example\": \"http://example.org/ns#\",\n\t\t\"ex\": \"http://example.org/ns#\",\n\t\t\"exif\": \"http://www.w3.org/2003/12/exif/ns#\",\n\t\t\"fn\": \"http://www.w3.org/2005/xpath-functions#\",\n\t\t\"foaf\": \"http://xmlns.com/foaf/0.1/\",\n\t\t\"geo\": \"http://www.w3.org/2003/01/geo/wgs84_pos#\",\n\t\t\"geonames\": \"http://www.geonames.org/ontology#\",\n\t\t\"gr\": \"http://purl.org/goodrelations/v1#\",\n\t\t\"http\": \"http://www.w3.org/2006/http#\",\n\t\t\"ldp\": \"http://www.w3.org/ns/ldp#\",\n\t\t\"log\": \"http://www.w3.org/2000/10/swap/log#\",\n\t\t\"owl\": \"http://www.w3.org/2002/07/owl#\",\n\t\t\"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n\t\t\"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n\t\t\"rei\": \"http://www.w3.org/2004/06/rei#\",\n\t\t\"rsa\": \"http://www.w3.org/ns/auth/rsa#\",\n\t\t\"rss\": \"http://purl.org/rss/1.0/\",\n\t\t\"sd\": \"http://www.w3.org/ns/sparql-service-description#\",\n\t\t\"sfn\": \"http://www.w3.org/ns/sparql#\",\n\t\t\"sioc\": \"http://rdfs.org/sioc/ns#\",\n\t\t\"skos\": \"http://www.w3.org/2004/02/skos/core#\",\n\t\t\"swrc\": \"http://swrc.ontoware.org/ontology#\",\n\t\t\"types\": \"http://rdfs.org/sioc/types#\",\n\t\t\"vcard\": \"http://www.w3.org/2001/vcard-rdf/3.0#\",\n\t\t\"wot\": \"http://xmlns.com/wot/0.1/\",\n\t\t\"xhtml\": \"http://www.w3.org/1999/xhtml#\",\n\t\t\"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n\t};\n\tprivate $element:JQuery;\n\tprivate carbon:Carbon;\n\tprivate _sparql:string = \"\";\n\tprivate _endpoint:string = \"\";\n\n\t// Getters and Setters\n\tget codeMirrorMode():typeof CodeMirrorComponent.Mode { return CodeMirrorComponent.Mode; }\n\n\tget sparql():string { return this._sparql; }\n\n\tset sparql( value:string ) {\n\t\tthis._sparql = value;\n\t\tthis.currentQuery.content = value;\n\t\tthis.sparqlChanged();\n\t}\n\n\tget endpoint():string { return this._endpoint; }\n\n\tset endpoint( value:string ) {\n\t\tthis._endpoint = value;\n\t\tthis.endpointChanged();\n\t}\n\n\tconstructor( element:ElementRef, carbon:Carbon ) {\n\t\tthis.element = element;\n\t\tthis.isSending = false;\n\t\tthis.savedQueries = this.getLocalSavedQueries() || [];\n\t\tthis.carbon = carbon;\n\t}\n\n\tngOnInit():void {\n\t\tif( ! this.context ) {\n\t\t\tthis.context = this.carbon;\n\t\t\tthis.isCarbonContext = true;\n\t\t} else {\n\t\t\tthis.endpoint = this.context.getBaseURI();\n\t\t}\n\t}\n\n\tngAfterViewInit():void {\n\t\tthis.$element = $( this.element.nativeElement );\n\t\tthis.btnSaveQuery = this.$element.find( \".btnSaveQuery\" );\n\t\tthis.btnsGroupSaveQuery = this.$element.find( \".btnsGroupSaveQuery\" );\n\t\tthis.btnSave = this.btnsGroupSaveQuery.find( \".btnSave\" );\n\t\tthis.btnSaveAs = this.btnsGroupSaveQuery.find( \".btnSaveAs\" );\n\t\tthis.sidebar = this.$element.find( \".query-builder .ui.sidebar\" );\n\t\tthis.btnsGroupSaveQuery.find( \".dropdown\" ).dropdown();\n\t\tthis.replaceQueryConfirmationModal = this.$element.find( \".ui.replace-query-confirmation.modal\" );\n\t\tthis.deleteQueryConfirmationModal = this.$element.find( \".ui.delete-query-confirmation.modal\" );\n\t\tthis.initializeSavedQueriesSidebar();\n\t\tthis.initializeModal();\n\t}\n\n\tonChangeQueryType( $event:JQueryEventObject ):void {\n\t\tlet type:string = (<HTMLInputElement>$event.target).value;\n\t\tthis.isQueryType = type === this.sparqlTypes.query;\n\t}\n\n\t/**\n\t * Updates the currentQuery and the available formats depending on the SPARQL Query Operation\n\t * Triggered whenever the user writes code inside the CodeMirror text area.\n\t */\n\tsparqlChanged():void {\n\t\tlet operation:string = this.getSPARQLOperation( this.sparql );\n\t\tif( operation !== null && this.sparqlQueryOperations[ operation.toLowerCase() ] ) {\n\t\t\toperation = operation.toLowerCase();\n\t\t\tthis.formatsAvailable = this.sparqlQueryOperations[ operation ].formats;\n\t\t\tif( this.formatsAvailable.indexOf( this.currentQuery.format ) === - 1 ) {\n\t\t\t\tthis.currentQuery.format = this.sparqlQueryOperations[ operation ].formats[ 0 ].value;\n\t\t\t}\n\t\t\tthis.currentQuery.type = this.sparqlTypes.query;\n\t\t\tlet queryOperations:string[] = [ \"select\", \"describe\", \"construct\", \"ask\" ];\n\t\t\tif( queryOperations.indexOf( operation ) === - 1 ) this.currentQuery.type = this.sparqlTypes.update;\n\t\t\tthis.currentQuery.operation = operation.toUpperCase();\n\t\t} else {\n\t\t\tthis.currentQuery.format = null;\n\t\t\tthis.currentQuery.operation = \"update\";\n\t\t\tthis.formatsAvailable = <any>[];\n\t\t}\n\t}\n\n\t/**\n\t * Updates the currentQuery endpoints according to the context in which the editor is working.\n\t * Triggered whenever the user writes the endpoint URI.\n\t */\n\tendpointChanged():void {\n\t\tif( this.regExpURL.test( this.endpoint ) ) {\n\t\t\tthis.currentQuery.endpoint = this.endpoint;\n\t\t} else {\n\t\t\tthis.currentQuery.endpoint = this.context.getBaseURI() + this.endpoint;\n\t\t}\n\t}\n\n\t/**\n\t * Identifies which SPARL Query Operation will be called\n\t * @param query  String. The content of the Code Mirror plugin.\n\t * @returns      String. The name of the main SPARQL Query Operation.\n\t */\n\tgetSPARQLOperation( query:string ):string {\n\t\tswitch( true ) {\n\t\t\tcase (this.regExpSelect.test( query )):\n\t\t\t\treturn this.sparqlQueryOperations.select.name;\n\t\t\tcase (this.regExpConstruct.test( query )):\n\t\t\t\treturn this.sparqlQueryOperations.construct.name;\n\t\t\tcase (this.regExpAsk.test( query )):\n\t\t\t\treturn this.sparqlQueryOperations.ask.name;\n\t\t\tcase (this.regExpDescribe.test( query )):\n\t\t\t\treturn this.sparqlQueryOperations.describe.name;\n\t\t\tcase (this.regExpInsert.test( query )):\n\t\t\t\treturn this.sparqlQueryOperations.insert.name;\n\t\t\tcase (this.regExpDelete.test( query )):\n\t\t\t\treturn this.sparqlQueryOperations.delete.name;\n\t\t\tcase (this.regExpClear.test( query )):\n\t\t\t\treturn this.sparqlQueryOperations.clear.name;\n\t\t\tcase (this.regExpCreate.test( query )):\n\t\t\t\treturn this.sparqlQueryOperations.create.name;\n\t\t\tcase (this.regExpDrop.test( query )):\n\t\t\t\treturn this.sparqlQueryOperations.drop.name;\n\t\t\tcase (this.regExpLoad.test( query )):\n\t\t\t\treturn this.sparqlQueryOperations.load.name;\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n\tonReExecute( originalResponse:SPARQLClientResponse ):void {\n\t\toriginalResponse.isReExecuting = true;\n\t\tthis.execute( originalResponse.query, originalResponse ).then(\n\t\t\t( newResponse:SPARQLClientResponse ) => {\n\t\t\t\toriginalResponse.duration = newResponse.duration;\n\t\t\t\toriginalResponse.resultset = Object.assign( {}, newResponse.resultset );\n\t\t\t\toriginalResponse.setData = Object.assign( {}, newResponse.resultset );\n\t\t\t\toriginalResponse.query = Object.assign( {}, newResponse.query );\n\t\t\t\toriginalResponse.isReExecuting = false;\n\t\t\t}\n\t\t).catch(\n\t\t\t( error:any ) => {\n\t\t\t\toriginalResponse.isReExecuting = false;\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t);\n\t}\n\n\tonExecute():void {\n\t\tthis.isSending = true;\n\t\tlet query:SPARQLQuery = Object.assign( {}, this.currentQuery );\n\n\t\tthis.execute( query, null ).then(\n\t\t\t( response:SPARQLClientResponse ) => {\n\t\t\t\tthis.addResponse( response );\n\t\t\t\treturn response;\n\t\t\t}\n\t\t).catch(\n\t\t\t( error:any ) => {\n\t\t\t\tif( this.emitErrors ) {\n\t\t\t\t\tthis.errorOccurs.emit( this.getMessage( error ) );\n\t\t\t\t} else {\n\t\t\t\t\tthis.messages.push( this.getMessage( error ) );\n\t\t\t\t}\n\t\t\t} );\n\t}\n\n\tonErase():void {\n\t\tthis.currentQuery.type = this.sparqlTypes.query;\n\t\tthis.sparql = \"\";\n\t\tthis.endpoint = \"\";\n\t}\n\n\texecute( query:SPARQLQuery, activeResponse?:SPARQLClientResponse ):Promise<SPARQLClientResponse> {\n\t\tlet type:string = query.type;\n\t\tif( activeResponse ) {\n\t\t\tquery = activeResponse.query;\n\t\t}\n\t\tlet promise:Promise<SPARQLClientResponse> = null;\n\t\tswitch( type ) {\n\t\t\tcase this.sparqlTypes.query:\n\t\t\t\tpromise = this.executeQuery( query );\n\t\t\t\tbreak;\n\t\t\tcase this.sparqlTypes.update:\n\t\t\t\tpromise = this.executeUPDATE( query );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// Unsupported Operation\n\t\t\t\tpromise = new Promise( ( resolve:() => string, reject:( msg:string ) => string ) => {\n\t\t\t\t\treject( \"Unsupported Type\" );\n\t\t\t\t} );\n\t\t}\n\n\t\treturn promise.then(\n\t\t\t( response:SPARQLClientResponse ) => {\n\t\t\t\t// Response Success\n\t\t\t\tthis.isSending = false;\n\t\t\t\treturn response;\n\t\t\t},\n\t\t\t( error:any ) => {\n\t\t\t\t// Response Fail\n\t\t\t\tthis.isSending = false;\n\t\t\t\treturn Promise.reject( error );\n\t\t\t}\n\t\t);\n\t}\n\n\texecuteQuery( query:SPARQLQuery ):Promise<SPARQLClientResponse> {\n\t\tthis.isSending = true;\n\t\tswitch( query.operation ) {\n\t\t\tcase this.sparqlQueryOperations.select.name:\n\t\t\t\treturn this.executeSELECT( query );\n\t\t\tcase this.sparqlQueryOperations.describe.name:\n\t\t\t\treturn this.executeDESCRIBE( query );\n\t\t\tcase this.sparqlQueryOperations.construct.name:\n\t\t\t\treturn this.executeCONSTRUCT( query );\n\t\t\tcase this.sparqlQueryOperations.ask.name:\n\t\t\t\treturn this.executeASK( query );\n\t\t\tdefault:\n\t\t\t\t// Unsupported Operation\n\t\t\t\treturn Promise.reject<SPARQLClientResponse>( \"Unsupported Operation\" );\n\t\t}\n\t}\n\n\texecuteSELECT( query:SPARQLQuery ):Promise<SPARQLClientResponse> {\n\t\tlet beforeTimestamp:number = ( new Date() ).valueOf();\n\t\treturn this.context.documents.executeRawSELECTQuery( query.endpoint, query.content ).then(\n\t\t\t( [ result, response ]:[ SPARQL.RawResults.Class, HTTP.Response.Class ] ):SPARQLClientResponse => {\n\t\t\t\tlet duration:number = (new Date()).valueOf() - beforeTimestamp;\n\t\t\t\treturn this.buildResponse( duration, result, <string> SPARQLResponseType.success, query );\n\t\t\t},\n\t\t\t( error:HTTP.Errors.Error ):Promise<SPARQLClientResponse> => {\n\t\t\t\treturn this.handleError( error, query, beforeTimestamp );\n\t\t\t} );\n\t}\n\n\texecuteDESCRIBE( query:SPARQLQuery ):Promise<SPARQLClientResponse> {\n\t\tlet beforeTimestamp:number = ( new Date() ).valueOf();\n\t\tlet requestOptions:HTTP.Request.Options = { headers: new Map().set( \"Accept\", new HTTP.Header.Class( query.format ) ) };\n\t\treturn this.context.documents.executeRawDESCRIBEQuery( query.endpoint, query.content, requestOptions ).then(\n\t\t\t( [ result, response ]:[ string, HTTP.Response.Class ] ):SPARQLClientResponse => {\n\t\t\t\tlet duration:number = (new Date()).valueOf() - beforeTimestamp;\n\t\t\t\treturn this.buildResponse( duration, result, <string> SPARQLResponseType.success, query );\n\t\t\t},\n\t\t\t( error:HTTP.Errors.Error ):Promise<SPARQLClientResponse> => {\n\t\t\t\treturn this.handleError( error, query, beforeTimestamp );\n\t\t\t} );\n\t}\n\n\texecuteCONSTRUCT( query:SPARQLQuery ):Promise<SPARQLClientResponse> {\n\t\tlet beforeTimestamp:number = ( new Date() ).valueOf();\n\t\tlet requestOptions:HTTP.Request.Options = { headers: new Map().set( \"Accept\", new HTTP.Header.Class( query.format ) ) };\n\t\treturn this.context.documents.executeRawCONSTRUCTQuery( query.endpoint, query.content, requestOptions ).then(\n\t\t\t( [ result, response ]:[ string, HTTP.Response.Class ] ):SPARQLClientResponse => {\n\t\t\t\tlet duration:number = (new Date()).valueOf() - beforeTimestamp;\n\t\t\t\treturn this.buildResponse( duration, result, <string> SPARQLResponseType.success, query );\n\t\t\t},\n\t\t\t( error:HTTP.Errors.Error ):Promise<SPARQLClientResponse> => {\n\t\t\t\treturn this.handleError( error, query, beforeTimestamp );\n\t\t\t} );\n\t}\n\n\texecuteASK( query:SPARQLQuery ):Promise<SPARQLClientResponse> {\n\t\tlet beforeTimestamp:number = ( new Date() ).valueOf();\n\t\treturn this.context.documents.executeRawASKQuery( query.endpoint, query.content ).then(\n\t\t\t( [ result, response ]:[ SPARQL.RawResults.Class, HTTP.Response.Class ] ):SPARQLClientResponse => {\n\t\t\t\tlet duration:number = (new Date()).valueOf() - beforeTimestamp;\n\t\t\t\treturn this.buildResponse( duration, result, <string> SPARQLResponseType.success, query );\n\t\t\t},\n\t\t\t( error:HTTP.Errors.Error ):Promise<SPARQLClientResponse> => {\n\t\t\t\treturn this.handleError( error, query, beforeTimestamp );\n\t\t\t} );\n\t}\n\n\texecuteUPDATE( query:SPARQLQuery ):Promise<SPARQLClientResponse> {\n\t\tthis.isSending = true;\n\t\tlet beforeTimestamp:number = ( new Date() ).valueOf();\n\t\treturn this.context.documents.executeUPDATE( query.endpoint, query.content ).then(\n\t\t\t( result:HTTP.Response.Class ):SPARQLClientResponse => {\n\t\t\t\tlet duration:number = (new Date()).valueOf() - beforeTimestamp;\n\t\t\t\treturn this.buildResponse( duration, (<XMLHttpRequest>result.request).status + \" - \" + (<XMLHttpRequest>result.request).statusText, <string> SPARQLResponseType.success, query );\n\t\t\t},\n\t\t\t( error:HTTP.Errors.Error ):Promise<SPARQLClientResponse> => {\n\t\t\t\treturn this.handleError( error, query, beforeTimestamp );\n\t\t\t} );\n\t}\n\n\tcanExecute():boolean {\n\t\treturn ! ! (this.currentQuery.endpoint && this.currentQuery.type && this.currentQuery.content && this.currentQuery.operation && this.currentQuery.format);\n\t}\n\n\tcanSaveQuery():boolean {\n\t\treturn ! ! (this.currentQuery.endpoint && this.currentQuery.type && this.currentQuery.content && this.currentQuery.operation && this.currentQuery.format && this.currentQuery.name);\n\t}\n\n\tcanErase():boolean {\n\t\treturn ( ! ! this.endpoint || ! ! this.sparql);\n\t}\n\n\tonEmptyStack():void {\n\t\tthis.responses = [];\n\t}\n\n\tonRemove( response:any ):void {\n\t\tlet idx:number = this.responses.indexOf( response );\n\t\tif( idx > - 1 ) this.responses.splice( idx, 1 );\n\t}\n\n\tonConfigureResponse( response:SPARQLClientResponse ):void {\n\t\tlet configureQuery:SPARQLQuery = this.askingQuery = Object.assign( {}, response.query );\n\t\tif( JSON.stringify( this.currentQuery ) !== JSON.stringify( configureQuery ) ) {\n\t\t\tthis.toggleReplaceQueryConfirmationModal();\n\t\t} else {\n\t\t\tthis.loadQuery( configureQuery );\n\t\t}\n\t}\n\n\taddResponse( response:SPARQLClientResponse ):void {\n\t\tlet responsesLength:number = this.responses.length, i:number;\n\t\tfor( i = responsesLength; i > 0; i -- ) {\n\t\t\tthis.responses[ i ] = this.responses[ i - 1 ];\n\t\t}\n\t\tthis.responses[ 0 ] = response;\n\t}\n\n\tonClickSaveQuery():void {\n\t\tlet query:SPARQLQuery = <SPARQLQuery>{\n\t\t\tendpoint: this.currentQuery.endpoint,\n\t\t\ttype: this.currentQuery.type,\n\t\t\tcontent: this.currentQuery.content,\n\t\t\toperation: this.currentQuery.operation,\n\t\t\tformat: this.currentQuery.format,\n\t\t\tname: this.currentQuery.name,\n\t\t\tid: this.savedQueries.length,\n\t\t};\n\t\tthis.isSaving = true;\n\t\tthis.savedQueries = this.getLocalSavedQueries();\n\t\tthis.savedQueries.push( query );\n\t\tthis.updateLocalSavedQueries();\n\t\tsetInterval( () => {\n\t\t\tthis.isSaving = false;\n\t\t}, 500 );\n\t}\n\n\tonClickSaveExistingQuery():void {\n\t\tthis.savedQueries = this.getLocalSavedQueries();\n\t\tlet queryIdx:number = - 1;\n\t\tthis.savedQueries.forEach( ( iteratingQuery:SPARQLQuery, index:number ) => {\n\t\t\tif( iteratingQuery.id === this.currentQuery.id ) {\n\t\t\t\tqueryIdx = index;\n\t\t\t}\n\t\t} );\n\t\tif( queryIdx > - 1 ) {\n\t\t\tthis.savedQueries[ queryIdx ] = <SPARQLQuery> {\n\t\t\t\tendpoint: this.currentQuery.endpoint,\n\t\t\t\ttype: this.currentQuery.type,\n\t\t\t\tcontent: this.currentQuery.content,\n\t\t\t\toperation: this.currentQuery.operation,\n\t\t\t\tformat: this.currentQuery.format,\n\t\t\t\tname: this.currentQuery.name,\n\t\t\t\tid: this.currentQuery.id,\n\t\t\t};\n\t\t} else {\n\t\t\tthis.currentQuery.id = this.savedQueries.length;\n\t\t\tthis.savedQueries.push( this.currentQuery );\n\t\t}\n\t\tthis.updateLocalSavedQueries();\n\t}\n\n\tonClickSavedQuery( selectedQuery:SPARQLQuery ):void {\n\t\tif( ! ! this.currentQuery.endpoint || ! ! this.currentQuery.content ) {\n\t\t\tif( ! ! this.currentQuery.endpoint && ! ! this.currentQuery.content ) {\n\t\t\t\tif( JSON.stringify( this.currentQuery ) !== JSON.stringify( selectedQuery ) ) {\n\t\t\t\t\tthis.askConfirmationToReplace( selectedQuery );\n\t\t\t\t} else {\n\t\t\t\t\tthis.loadQuery( selectedQuery );\n\t\t\t\t\tthis.toggleSidebar();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif( (! ! this.currentQuery.endpoint && this.currentQuery.endpoint === selectedQuery.endpoint) ||\n\t\t\t\t\t(! ! this.currentQuery.content && this.currentQuery.content === selectedQuery.content) ) {\n\t\t\t\t\tthis.loadQuery( selectedQuery );\n\t\t\t\t\tthis.toggleSidebar();\n\t\t\t\t} else {\n\t\t\t\t\tthis.askConfirmationToReplace( selectedQuery );\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\tthis.loadQuery( selectedQuery );\n\t\t\tthis.toggleSidebar();\n\t\t}\n\t}\n\n\taskConfirmationToReplace( selectedQuery:SPARQLQuery ):void {\n\t\tthis.askingQuery = Object.assign( {}, selectedQuery );\n\t\tthis.toggleReplaceQueryConfirmationModal();\n\t}\n\n\tonClickRemoveSavedQuery( index:number ):void {\n\t\tthis.savedQueries = this.getLocalSavedQueries();\n\t\tthis.askingQuery = this.savedQueries[ index ];\n\t\tthis.toggleDeleteQueryConfirmationModal();\n\t}\n\n\tremoveQuery( query:SPARQLQuery ):void {\n\t\tthis.savedQueries = this.getLocalSavedQueries();\n\t\tlet index:number = this.savedQueries.indexOf( query );\n\t\tthis.savedQueries.splice( index, 1 );\n\t\tthis.updateLocalSavedQueries();\n\t}\n\n\tloadQuery( query:SPARQLQuery ):void {\n\t\tthis.currentQuery = Object.assign( {}, query );\n\t\tthis.askingQuery = Object.assign( {}, query );\n\t\tthis.endpoint = query.endpoint;\n\t\tthis.sparql = query.content;\n\t}\n\n\tinitializeSavedQueriesSidebar():void {\n\t\tthis.sidebar.sidebar( {\n\t\t\tcontext: this.$element.find( \".query-builder .pushable\" ),\n\t\t} );\n\t}\n\n\tinitializeModal():void {\n\t\tthis.deleteQueryConfirmationModal.modal( {\n\t\t\tclosable: false,\n\t\t\tblurring: true,\n\t\t} );\n\t\tthis.replaceQueryConfirmationModal.modal( {\n\t\t\tclosable: false,\n\t\t\tblurring: true,\n\t\t} );\n\t}\n\n\ttoggleReplaceQueryConfirmationModal():void {\n\t\tthis.replaceQueryConfirmationModal.modal( \"toggle\" );\n\t}\n\n\ttoggleDeleteQueryConfirmationModal():void {\n\t\tthis.deleteQueryConfirmationModal.modal( \"toggle\" );\n\t}\n\n\tonApproveQueryReplacement( approvedQuery:SPARQLQuery ):void {\n\t\tthis.askingQuery = <SPARQLQuery>{};\n\t\tthis.loadQuery( approvedQuery );\n\t\tthis.hideSidebar();\n\t}\n\n\tonApproveQueryRemoval( approvedQuery:SPARQLQuery ):void {\n\t\tthis.removeQuery( approvedQuery );\n\t\tthis.askingQuery = <SPARQLQuery>{};\n\t}\n\n\tgetLocalSavedQueries():SPARQLQuery[] {\n\t\tif( ! window.localStorage.getItem( \"savedQueries\" ) )\n\t\t\tthis.updateLocalSavedQueries();\n\t\treturn <SPARQLQuery[]>JSON.parse( window.localStorage.getItem( \"savedQueries\" ) );\n\t}\n\n\tupdateLocalSavedQueries():void {\n\t\twindow.localStorage.setItem( \"savedQueries\", JSON.stringify( this.savedQueries ) );\n\t}\n\n\ttoggleSidebar():void {\n\t\tthis.sidebar.sidebar( \"toggle\" );\n\t}\n\n\thideSidebar():void {\n\t\tthis.sidebar.sidebar( \"hide\" );\n\t}\n\n\tcloseMessage( evt:any ):void {\n\t\t$( evt.srcElement ).closest( \".ui.message\" ).transition( \"fade\" );\n\t}\n\n\tgetMessage( error:any ):Message {\n\t\tswitch( typeof error ) {\n\t\t\tcase \"string\":\n\t\t\t\treturn <Message>{\n\t\t\t\t\ttitle: error,\n\t\t\t\t\tcontent: \"\",\n\t\t\t\t\tstatusCode: \"\",\n\t\t\t\t\tstatusMessage: \"\",\n\t\t\t\t\tendpoint: \"\",\n\t\t\t\t};\n\t\t\tcase \"object\":\n\t\t\t\treturn <Message>{\n\t\t\t\t\ttitle: error.name,\n\t\t\t\t\tcontent: error.message,\n\t\t\t\t\tstatusCode: error.response.status,\n\t\t\t\t\tstatusMessage: error.response.request.statusText,\n\t\t\t\t\tendpoint: error.response.request.responseURL,\n\t\t\t\t};\n\t\t\tdefault:\n\t\t\t\treturn <Message>{\n\t\t\t\t\ttitle: error.toString(),\n\t\t\t\t};\n\t\t}\n\t}\n\n\tbuildResponse( duration:number, resultset:SPARQL.RawResults.Class|string|Message, responseType:string, query:SPARQLQuery ):SPARQLClientResponse {\n\t\tlet clientResponse:SPARQLClientResponse = new SPARQLClientResponse();\n\t\tclientResponse.duration = duration;\n\t\tclientResponse.resultset = resultset;\n\t\tclientResponse.setData( resultset );\n\t\tclientResponse.query = query;\n\t\tclientResponse.result = responseType;\n\t\treturn clientResponse;\n\t}\n\n\thandleError( error:HTTP.Errors.Error, query:SPARQLQuery, beforeTimestamp:number ):Promise<SPARQLClientResponse> {\n\t\tlet duration:number = (new Date()).valueOf() - beforeTimestamp;\n\t\treturn new Promise<SPARQLClientResponse>(\n\t\t\t( resolve, reject ) => {\n\t\t\t\tlet stackErrors:number[] = [ 400, 403, 404, 413, 414, 429 ];\n\t\t\t\t// TODO implement login modal when 401\n\t\t\t\tif( stackErrors.indexOf( error.response.status ) > - 1 ) {\n\t\t\t\t\tlet errorMessage:Message = this.getMessage( error );\n\t\t\t\t\tlet errorResponse:SPARQLClientResponse = this.buildResponse( duration, errorMessage, <string> SPARQLResponseType.error, query );\n\t\t\t\t\tresolve( errorResponse );\n\t\t\t\t} else {\n\t\t\t\t\treject( error );\n\t\t\t\t}\n\t\t\t}\n\t\t).then(\n\t\t\t( response:SPARQLClientResponse ) => {\n\t\t\t\treturn response;\n\t\t\t},\n\t\t\t( _error:HTTP.Errors.Error ) => {\n\t\t\t\treturn Promise.reject( _error );\n\t\t\t}\n\t\t);\n\t}\n}\n\nexport interface SPARQLQueryOperationFormat {\n\tname:string;\n\tvalue:string;\n}\nexport interface SPARQLQueryOperation {\n\tname:string;\n\tformats:SPARQLQueryOperationFormat[];\n}\nexport interface SPARQLQueryOperations {\n\tselect:SPARQLQueryOperation;\n\tdescribe:SPARQLQueryOperation;\n\tconstruct:SPARQLQueryOperation;\n\task:SPARQLQueryOperation;\n\tinsert:SPARQLQueryOperation;\n\t\"delete\":SPARQLQueryOperation;\n\tclear:SPARQLQueryOperation;\n\tcreate:SPARQLQueryOperation;\n\tdrop:SPARQLQueryOperation;\n\tload:SPARQLQueryOperation;\n}\nexport interface SPARQLTypes {\n\tquery:string;\n\tupdate:string;\n}\nexport interface Message {\n\ttitle:string;\n\tcontent:string;\n\tstatusCode:string;\n\tstatusMessage:string;\n\tendpoint:string;\n}\nexport default SPARQLClientComponent;\n"]}