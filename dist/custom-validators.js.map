{"version":3,"sources":["custom-validators.ts"],"names":[],"mappings":";;;QAGW,cAAc,EASd,iBAAiB;;;;YATjB,4BAAA,cAAc,GAAe,wBAAyB,OAAuB;gBACvF,2BAA2B;gBAC3B,EAAE,CAAA,CAAE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAE,uIAAuI,CAAG,CAAC,CAAC,CAAC;oBACrK,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,MAAM,CAAC,EAAE,qBAAqB,EAAE,IAAI,EAAE,CAAC;gBACxC,CAAC;YACF,CAAC,CAAA,CAAC;YAES,+BAAA,iBAAiB,GAAe,2BAA4B,OAAuB;gBAC7F,sEAAsE;gBACtE,8DAA8D;gBAC9D,EAAE,CAAA,CAAE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAE,yCAAyC,CAAG,CAAC,CAAC,CAAC;oBACvE,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,MAAM,CAAC,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC;gBACpC,CAAC;YACF,CAAC,CAAA,CAAC","file":"custom-validators.js","sourcesContent":["import { AbstractControl } from \"@angular/common\";\nimport { ValidatorFn } from \"@angular/common/src/forms/directives/validators\";\n\nexport let EmailValidator:ValidatorFn = function EmailValidator( control:AbstractControl ):{ [key:string]:any } {\n\t// RFC 2822 compliant regex\n\tif( control.value.match( /[a-z0-9!#$%&\"*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&\"*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/ ) ) {\n\t\treturn null;\n\t} else {\n\t\treturn { \"invalidEmailAddress\": true };\n\t}\n};\n\nexport let PasswordValidator:ValidatorFn = function PasswordValidator( control:AbstractControl ):{ [key:string]:any } {\n\t// {6,100}           - Assert password is between 6 and 100 characters\n\t// (?=.*[0-9])       - Assert a string has at least one number\n\tif( control.value.match( /^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/ ) ) {\n\t\treturn null;\n\t} else {\n\t\treturn { \"invalidPassword\": true };\n\t}\n};\n"],"sourceRoot":"/source/"}