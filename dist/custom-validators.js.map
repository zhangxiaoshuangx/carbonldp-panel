{"version":3,"sources":["custom-validators.ts"],"names":[],"mappings":"AAAA,qDAAqD;AACrD,4FAA4F;AAC5F,EAAE;AACF,oHAAoH;AACpH,+BAA+B;AAC/B,0KAA0K;AAC1K,iBAAiB;AACjB,YAAY;AACZ,4CAA4C;AAC5C,KAAK;AACL,KAAK;AACL,EAAE;AACF,0HAA0H;AAC1H,0EAA0E;AAC1E,kEAAkE;AAClE,4EAA4E;AAC5E,iBAAiB;AACjB,YAAY;AACZ,wCAAwC;AACxC,KAAK;AACL,KAAK;AACL,EAAE;AACF,8JAA8J;AAC9J,qFAAqF;AACrF,kFAAkF;AAClF,sBAAsB;AACtB,KAAK;AACL,KAAK;AACL,sCAAsC;AACtC,4CAA4C;AAC5C,uDAAuD;AACvD,4CAA4C;;;;;;;;;;;;;;;;;;;;;;;;YAS5C;gBAAA;gBAWA,CAAC;gBAVA,iCAAQ,GAAR,UAAU,OAAuB;oBAChC,2BAA2B;oBAC3B,EAAE,CAAA,CAAE,OAAO,CAAC,KAAM,CAAC,CAAC,CAAC;wBACpB,EAAE,CAAA,CAAE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAE,uIAAuI,CAAG,CAAC,CAAC,CAAC;4BACrK,MAAM,CAAC,IAAI,CAAC;wBACb,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACP,MAAM,CAAC,EAAE,qBAAqB,EAAE,IAAI,EAAE,CAAC;wBACxC,CAAC;oBACF,CAAC;gBACF,CAAC;gBAdF;oBAAC,gBAAS,CAAE;wBACX,QAAQ,EAAE,SAAS;wBACnB,SAAS,EAAE,CAAE,EAAE,OAAO,EAAE,qBAAa,EAAE,WAAW,EAAE,cAAc,EAAE,KAAK,EAAE,IAAI,EAAE,CAAE;qBACnF,CAAE;;kCAAA;gBAYH,qBAAC;YAAD,CAXA,AAWC,IAAA;YAXD,2CAWC,CAAA;YAED,gBAAgB;YAChB,2BAA2B;YAC3B,0FAA0F;YAC1F,MAAM;YACN,wDAAwD;YACxD,6DAA6D;YAC7D,2EAA2E;YAC3E,mEAAmE;YACnE,0BAA0B;YAC1B,8EAA8E;YAC9E,mBAAmB;YACnB,cAAc;YACd,0CAA0C;YAC1C,OAAO;YACP,MAAM;YACN,KAAK;YACL,IAAI;YAOJ;gBAAA;gBAUA,CAAC;gBARA,gCAAQ,GAAR,UAAU,OAAuB;oBAChC,EAAE,CAAA,CAAE,OAAO,CAAC,KAAM,CAAC,CAAC,CAAC;wBACpB,EAAE,CAAA,CAAE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAE,mCAAmC,CAAG,CAAC,CAAC,CAAC;4BACjE,MAAM,CAAC,IAAI,CAAC;wBACb,CAAC;wBACD,MAAM,CAAC,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC;oBAChC,CAAC;gBACF,CAAC;gBAbF;oBAAC,gBAAS,CAAE;wBACX,QAAQ,EAAE,QAAQ;wBAClB,SAAS,EAAE,CAAE,EAAE,OAAO,EAAE,qBAAa,EAAE,WAAW,EAAE,aAAa,EAAE,KAAK,EAAE,IAAI,EAAE,CAAE;qBAClF,CAAE;;iCAAA;gBAWH,oBAAC;YAAD,CAVA,AAUC,IAAA;YAVD,yCAUC,CAAA;YAOD;gBAAA;gBAoBA,CAAC;gBAhBA,oCAAW,GAAX,UAAa,OAAqB;oBACjC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAE,KAAK,EAAE,IAAI,CAAE,CAAC;gBAC5D,CAAC;gBAED,iCAAQ,GAAR,UAAU,OAAuB;oBAChC,sEAAsE;oBACtE,8DAA8D;oBAC9D,+EAA+E;oBAC/E,EAAE,CAAA,CAAE,OAAO,CAAC,KAAM,CAAC,CAAC,CAAC;wBACpB,EAAE,CAAA,CAAE,OAAO,CAAC,KAAK,KAAK,IAAI,CAAC,OAAQ,CAAC;4BACnC,MAAM,CAAC,IAAI,CAAC;wBACb,IAAI,CAAC,CAAC;4BACL,MAAM,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;wBAC/B,CAAC;oBACF,CAAC;gBACF,CAAC;gBAlBD;oBAAC,YAAK,EAAE;;+DAAA;gBACR;oBAAC,YAAK,EAAE;;+DAAA;gBANT;oBAAC,gBAAS,CAAE;wBACX,QAAQ,EAAE,SAAS;wBACnB,SAAS,EAAE,CAAE,EAAE,OAAO,EAAE,qBAAa,EAAE,WAAW,EAAE,cAAc,EAAE,KAAK,EAAE,IAAI,EAAE,CAAE;qBACnF,CAAE;;kCAAA;gBAqBH,qBAAC;YAAD,CApBA,AAoBC,IAAA;YApBD,2CAoBC,CAAA;YAMD;gBAAA;gBAWA,CAAC;gBATA,kCAAQ,GAAR,UAAU,OAAuB;oBAChC,EAAE,CAAA,CAAE,OAAO,CAAC,KAAM,CAAC,CAAC,CAAC;wBACpB,EAAE,CAAA,CAAE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAE,kHAAkH,CAAG,CAAC;4BAC9I,MAAM,CAAC,IAAI,CAAC;wBACb,IAAI,CAAC,CAAC;4BACL,MAAM,CAAC,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC;wBACtC,CAAC;oBACF,CAAC;gBACF,CAAC;gBAdF;oBAAC,gBAAS,CAAE;wBACX,QAAQ,EAAE,UAAU;wBACpB,SAAS,EAAE,CAAE,EAAE,OAAO,EAAE,qBAAa,EAAE,WAAW,EAAE,eAAe,EAAE,KAAK,EAAE,IAAI,EAAE,CAAE;qBACpF,CAAE;;mCAAA;gBAYH,sBAAC;YAAD,CAXA,AAWC,IAAA;YAXD,6CAWC,CAAA;YAMD;gBAAA;gBAcA,CAAC;gBAZA,+BAAQ,GAAR,UAAU,OAAuB;oBAChC,EAAE,CAAA,CAAE,OAAO,CAAC,KAAM,CAAC,CAAC,CAAC;wBACpB,EAAE,CAAA,CAAE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAE,4GAA4G,CAAG,CAAC,CAAC,CAAC;4BAC1I,MAAM,CAAC,IAAI,CAAC;wBACb,CAAC;wBACD,IAAI,CAAC,CAAC;4BACL,8CAA8C;4BAC9C,MAAM,CAAC,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC;wBACtC,CAAC;oBACF,CAAC;oBACD,MAAM,CAAC,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC;gBACpC,CAAC;gBAjBF;oBAAC,gBAAS,CAAE;wBACX,QAAQ,EAAE,OAAO;wBACjB,SAAS,EAAE,CAAE,EAAE,OAAO,EAAE,qBAAa,EAAE,WAAW,EAAE,YAAY,EAAE,KAAK,EAAE,IAAI,EAAE,CAAE;qBACjF,CAAE;;gCAAA;gBAeH,mBAAC;YAAD,CAdA,AAcC,IAAA;YAdD,uCAcC,CAAA;;;;AAED,gBAAgB;AAChB,kCAAkC;AAClC,gGAAgG;AAChG,MAAM;AACN,8DAA8D;AAC9D,EAAE;AACF,6DAA6D;AAC7D,qCAAqC;AACrC,qDAAqD;AACrD,KAAK;AACL,IAAI;AACJ,gBAAgB;AAChB,8BAA8B;AAC9B,4FAA4F;AAC5F,MAAM;AACN,qEAAqE;AACrE,4BAA4B;AAC5B,qBAAqB;AACrB,EAAE;AACF,0CAA0C;AAC1C,oEAAoE;AACpE,gEAAgE;AAChE,KAAK;AACL,EAAE;AACF,6CAA6C;AAC7C,iGAAiG;AACjG,oEAAoE;AACpE,gDAAgD;AAChD,KAAK;AACL,IAAI;AAEJ,gBAAgB;AAChB,oCAAoC;AACpC,iGAAiG;AACjG,MAAM;AACN,+DAA+D;AAC/D,EAAE;AACF,yDAAyD;AACzD,gDAAgD;AAChD,gEAAgE;AAChE,MAAM;AACN,oCAAoC;AACpC,KAAK;AACL,IAAI;AAEJ,gBAAgB;AAChB,0CAA0C;AAC1C,8FAA8F;AAC9F,MAAM;AACN,uEAAuE;AACvE,gCAAgC;AAChC,sBAAsB;AACtB,gBAAgB;AAChB,kBAAkB;AAClB,qBAAqB;AACrB,EAAE;AACF,0CAA0C;AAC1C,gEAAgE;AAChE,KAAK;AACL,EAAE;AACF,6DAA6D;AAC7D,EAAE;AACF,wBAAwB;AACxB,0GAA0G;AAC1G,kMAAkM;AAClM,8GAA8G;AAC9G,uEAAuE;AACvE,uFAAuF;AACvF,MAAM;AACN,iBAAiB;AACjB,KAAK;AACL,IAAI;AACJ,EAAE;AACF,gBAAgB;AAChB,+BAA+B;AAC/B,oFAAoF;AACpF,MAAM;AACN,6DAA6D;AAC7D,+BAA+B;AAC/B,sBAAsB;AACtB,yBAAyB;AACzB,gBAAgB;AAChB,qBAAqB;AACrB,EAAE;AACF,0CAA0C;AAC1C,sFAAsF;AACtF,gEAAgE;AAChE,KAAK;AACL,EAAE;AACF,6DAA6D;AAC7D,EAAE;AACF,wBAAwB;AACxB,0GAA0G;AAC1G,iIAAiI;AACjI,+KAA+K;AAC/K,8GAA8G;AAC9G,wEAAwE;AACxE,uFAAuF;AACvF,MAAM;AACN,iBAAiB;AACjB,KAAK;AACL,IAAI;AAEJ,gBAAgB;AAChB,kCAAkC;AAClC,uFAAuF;AACvF,MAAM;AACN,EAAE;AACF,gEAAgE;AAChE,kBAAkB;AAClB,qBAAqB;AACrB,EAAE;AACF,0CAA0C;AAC1C,gEAAgE;AAChE,KAAK;AACL,EAAE;AACF,6DAA6D;AAC7D,uBAAuB;AACvB,2BAA2B;AAC3B,gBAAgB;AAChB,mCAAmC;AACnC,iCAAiC;AACjC,oBAAoB;AACpB,mBAAmB;AACnB,iBAAiB;AACjB,iBAAiB;AACjB,qBAAqB;AACrB,kBAAkB;AAClB,iBAAiB;AACjB,iBAAiB;AACjB,sBAAsB;AACtB,QAAQ;AACR,aAAa;AACb,EAAE;AACF,gBAAgB;AAChB,gCAAgC;AAChC,oCAAoC;AACpC,sLAAsL;AACtL,aAAa;AACb,EAAE;AACF,iCAAiC;AACjC,oCAAoC;AACpC,iCAAiC;AACjC,4CAA4C;AAC5C,+CAA+C;AAC/C,+CAA+C;AAC/C,4CAA4C;AAC5C,kCAAkC;AAClC,yCAAyC;AACzC,wCAAwC;AACxC,0CAA0C;AAC1C,yCAAyC;AACzC,mCAAmC;AACnC,kCAAkC;AAClC,qLAAqL;AACrL,aAAa;AACb,EAAE;AACF,cAAc;AACd,gCAAgC;AAChC,oCAAoC;AACpC,gCAAgC;AAChC,oFAAoF;AACpF,aAAa;AACb,EAAE;AACF,kCAAkC;AAClC,sFAAsF;AACtF,aAAa;AACb,EAAE;AACF,cAAc;AACd,+CAA+C;AAC/C,aAAa;AACb,MAAM;AACN,oBAAoB;AACpB,0CAA0C;AAC1C,MAAM;AACN,iBAAiB;AACjB,EAAE;AACF,KAAK;AACL,IAAI;AACJ,EAAE;AACF,EAAE;AACF,gBAAgB;AAChB,uCAAuC;AACvC,2FAA2F;AAC3F,MAAM;AACN,yDAAyD;AACzD,yBAAyB;AACzB,EAAE;AACF,6DAA6D;AAC7D,gEAAgE;AAChE,0GAA0G;AAC1G,sCAAsC;AACtC,MAAM;AACN,8BAA8B;AAC9B,oHAAoH;AACpH,qDAAqD;AACrD,uCAAuC;AACvC,UAAU;AACV,SAAS;AACT,WAAW;AACX,kIAAkI;AAClI,wFAAwF;AACxF,OAAO;AACP,MAAM;AACN,iBAAiB;AACjB,EAAE;AACF,KAAK;AACL,IAAI","file":"custom-validators.js","sourcesContent":["// import { AbstractControl } from \"@angular/common\";\n// import { ValidatorFn } from \"@angular/common/src/forms-deprecated/directives/validators\";\n//\n// export let EmailValidator:ValidatorFn = function EmailValidator( control:AbstractControl ):{ [key:string]:any } {\n// \t// RFC 2822 compliant regex\n// \tif( control.value.match( /[a-z0-9!#$%&\"*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&\"*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/ ) ) {\n// \t\treturn null;\n// \t} else {\n// \t\treturn { \"invalidEmailAddress\": true };\n// \t}\n// };\n//\n// export let PasswordValidator:ValidatorFn = function PasswordValidator( control:AbstractControl ):{ [key:string]:any } {\n// \t// {6,100}           - Assert password is between 6 and 100 characters\n// \t// (?=.*[0-9])       - Assert a string has at least one number\n// \tif( control.value.match( /^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/ ) ) {\n// \t\treturn null;\n// \t} else {\n// \t\treturn { \"invalidPassword\": true };\n// \t}\n// };\n//\n// export let SameAsValidator:( controlToCompare:AbstractControl ) => ValidatorFn = function SameAsValidator( controlToCompare:AbstractControl ):ValidatorFn {\n// \treturn function SameAsValidator( control:AbstractControl ):{ [key:string]:any } {\n// \t\tif( controlToCompare.value !== control.value ) return { \"notTheSame\": true };\n// \t\telse return null;\n// \t}\n// };\n// import * as NS from \"carbonldp/NS\";\n// import * as Utils from \"carbonldp/Utils\";\n// import * as SDKLiteral from \"carbonldp/RDF/Literal\";\n// import * as URI from \"carbonldp/RDF/URI\";\n\nimport { Directive, Input, OnChanges, SimpleChanges } from \"@angular/core\";\nimport { AbstractControl, Validator, NG_VALIDATORS } from \"@angular/forms\";\n\n@Directive( {\n\tselector: \"[email]\",\n\tproviders: [ { provide: NG_VALIDATORS, useExisting: EmailValidator, multi: true } ]\n} )\nexport class EmailValidator implements Validator {\n\tvalidate( control:AbstractControl ):{[key:string]:any;} {\n\t\t// RFC 2822 compliant regex\n\t\tif( control.value ) {\n\t\t\tif( control.value.match( /[a-z0-9!#$%&\"*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&\"*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/ ) ) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\treturn { \"invalidEmailAddress\": true };\n\t\t\t}\n\t\t}\n\t}\n}\n\n// @Directive( {\n// \tselector: \"[password]\",\n// \tproviders: [ { provide: NG_VALIDATORS, useExisting: PasswordValidator, multi: true } ]\n// } )\n// export class PasswordValidator implements Validator {\n// \tvalidate( control:AbstractControl ):{[key:string]:any;} {\n// \t\t// {6,100}           - Assert password is between 6 and 100 characters\n// \t\t// (?=.*[0-9])       - Assert a string has at least one number\n// \t\tif( control.value ) {\n// \t\t\tif( control.value.match( /^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/ ) ) {\n// \t\t\t\treturn null;\n// \t\t\t} else {\n// \t\t\t\treturn { \"invalidPassword\": true };\n// \t\t\t}\n// \t\t}\n// \t}\n// }\n\n\n@Directive( {\n\tselector: \"[slug]\",\n\tproviders: [ { provide: NG_VALIDATORS, useExisting: SlugValidator, multi: true } ]\n} )\nexport class SlugValidator implements Validator {\n\n\tvalidate( control:AbstractControl ):{[key:string]:any;} {\n\t\tif( control.value ) {\n\t\t\tif( control.value.match( /^[a-z0-9]+(?:-[a-z0-9]*)*(?:\\/*)$/ ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn { \"invalidSlug\": true };\n\t\t}\n\t}\n}\n\n\n@Directive( {\n\tselector: \"[match]\",\n\tproviders: [ { provide: NG_VALIDATORS, useExisting: MatchValidator, multi: true } ]\n} )\nexport class MatchValidator implements Validator,OnChanges {\n\t@Input() matchTo;\n\t@Input() control;\n\n\tngOnChanges( changes:SimpleChanges ) {\n\t\tthis.control.control.updateValueAndValidity( false, true );\n\t}\n\n\tvalidate( control:AbstractControl ):{[key:string]:any;} {\n\t\t// {6,100}           - Assert password is between 6 and 100 characters\n\t\t// (?=.*[0-9])       - Assert a string has at least one number\n\t\t//if( controlGroup.value.match( /^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/ ) ) {\n\t\tif( control.value ) {\n\t\t\tif( control.value === this.matchTo )\n\t\t\t\treturn null;\n\t\t\telse {\n\t\t\t\treturn { \"matchError\": true };\n\t\t\t}\n\t\t}\n\t}\n}\n\n@Directive( {\n\tselector: \"[domain]\",\n\tproviders: [ { provide: NG_VALIDATORS, useExisting: DomainValidator, multi: true } ]\n} )\nexport class DomainValidator implements Validator {\n\n\tvalidate( control:AbstractControl ):{[key:string]:any;} {\n\t\tif( control.value ) {\n\t\t\tif( control.value.match( /^http(s?):\\/\\/((\\w+\\.)?\\w+\\.\\w+|((2[0-5]{2}|1[0-9]{2}|[0-9]{1,2})\\.){3}(2[0-5]{2}|1[0-9]{2}|[0-9]{1,2}))(\\/)?$/gm ) )\n\t\t\t\treturn null;\n\t\t\telse {\n\t\t\t\treturn { \"invalidURLAddress\": true };\n\t\t\t}\n\t\t}\n\t}\n}\n\n@Directive( {\n\tselector: \"[uri]\",\n\tproviders: [ { provide: NG_VALIDATORS, useExisting: URIValidator, multi: true } ]\n} )\nexport class URIValidator implements Validator {\n\n\tvalidate( control:AbstractControl ):{[key:string]:any;} {\n\t\tif( control.value ) {\n\t\t\tif( control.value.match( /^(ftp|https?):\\/\\/(\\w+:{0,1}\\w*@)?((?![^\\/]+\\/(?:ftp|https?):)\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?$/ ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t//if( control.touched && ! ! control.value ) {\n\t\t\t\treturn { \"invalidURIAddress\": true };\n\t\t\t}\n\t\t}\n\t\treturn { \"emptyURIAddress\": true };\n\t}\n}\n\n// @Directive( {\n// \tselector: \"[existing-backup]\",\n// \tproviders: [ { provide: NG_VALIDATORS, useExisting: ExistingBackupValidator, multi: true } ]\n// } )\n// export class ExistingBackupValidator implements Validator {\n//\n// \tvalidate( control:AbstractControl ):{[key:string]:any;} {\n// \t\tif( control.value ) return null;\n// \t\treturn { \"invalidExistingBackupAddress\": true };\n// \t}\n// }\n// @Directive( {\n// \tselector: \"[backup-file]\",\n// \tproviders: [ { provide: NG_VALIDATORS, useExisting: BackupFileValidator, multi: true } ]\n// } )\n// export class BackupFileValidator implements Validator, OnChanges {\n// \t@Input() backupFileBlob;\n// \t@Input() control;\n//\n// \tngOnChanges( changes:SimpleChanges ) {\n// \t\tthis.backupFileBlob = changes[ \"backupFileBlob\" ].currentValue;\n// \t\tthis.control.control.updateValueAndValidity( false, true );\n// \t}\n//\n// \tvalidate( control:AbstractControl ):any {\n// \t\tif( ! ! this.backupFileBlob && this.backupFileBlob.type === \"application/zip\" ) return null;\n// \t\tif( ! this.backupFileBlob ) return { \"emptyBackupFile\": true };\n// \t\treturn { \"invalidBackupFileFormat\": true };\n// \t}\n// }\n\n// @Directive( {\n// \tselector: \"[one-control-valid]\",\n// \tproviders: [ { provide: NG_VALIDATORS, useExisting: OneControlValidValidator, multi: true } ]\n// } )\n// export class OneControlValidValidator implements Validator {\n//\n// \tvalidate( formGroup:FormGroup ):{[key:string]:any;} {\n// \t\tfor ( let control in formGroup.controls ) {\n// \t\t\tif( ! ! formGroup.controls[ control ].valid ) return null;\n// \t\t}\n// \t\treturn { \"invalidForm\": true };\n// \t}\n// }\n\n// @Directive( {\n// \tselector: \"[name-explorer-validator]\",\n// \tproviders: [ { provide: NG_VALIDATORS, useExisting: NameExplorerValidator, multi: true } ]\n// } )\n// export class NameExplorerValidator implements Validator, OnChanges {\n// \t@Input() existingProperties;\n// \t@Input() property;\n// \t@Input() id;\n// \t@Input() name;\n// \t@Input() control;\n//\n// \tngOnChanges( changes:SimpleChanges ) {\n// \t\tthis.control.control.updateValueAndValidity( false, true );\n// \t}\n//\n// \tvalidate( control:AbstractControl ):{[key:string]:any;} {\n//\n// \t\tif( ! ! control ) {\n// \t\t\tif( typeof control.value === \"undefined\" || control.value === null || ! control.value ) return null;\n// \t\t\tif( this.existingProperties.indexOf( control.value ) !== - 1 && (this.property.added ? this.id !== control.value : this.name !== control.value) ) return { \"duplicatedPropertyName\": true };\n// \t\t\tlet url = new RegExp( \"(https?:\\/\\/(?:www\\.|(?!www))[^\\s\\.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})\", \"g\" );\n// \t\t\tif( ! url.test( control.value ) ) return { \"invalidName\": true };\n// \t\t\tif( control.value.split( \"#\" ).length > 2 ) return { \"duplicatedHashtag\": true };\n// \t\t}\n// \t\treturn null;\n// \t}\n// }\n//\n// @Directive( {\n// \tselector: \"[id-validator]\",\n// \tproviders: [ { provide: NG_VALIDATORS, useExisting: IdValidator, multi: true } ]\n// } )\n// export class IdValidator implements Validator, OnChanges {\n// \t@Input() existingFragments;\n// \t@Input() property;\n// \t@Input() documentURI;\n// \t@Input() id;\n// \t@Input() control;\n//\n// \tngOnChanges( changes:SimpleChanges ) {\n// \t\t// if(changes[\"value\"].currentValue) this.control.control.setValue( this.value );\n// \t\tthis.control.control.updateValueAndValidity( false, true );\n// \t}\n//\n// \tvalidate( control:AbstractControl ):{[key:string]:any;} {\n//\n// \t\tif( ! ! control ) {\n// \t\t\tif( typeof control.value === \"undefined\" || control.value === null || ! control.value ) return null;\n// \t\t\tif( typeof control.value === \"string\" && ! control.value.startsWith( this.documentURI ) ) return { \"invalidParent\": true };\n// \t\t\tif( this.existingFragments.indexOf( control.value ) !== - 1 && (this.property.added ? this.id !== control.value : true) ) return { \"duplicatedNamedFragmentName\": true };\n// \t\t\tlet url = new RegExp( \"(https?:\\/\\/(?:www\\.|(?!www))[^\\s\\.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})\", \"g\" );\n// \t\t\tif( ! url.test( control.value ) ) return { \"invalidValue\": true };\n// \t\t\tif( control.value.split( \"#\" ).length > 2 ) return { \"duplicatedHashtag\": true };\n// \t\t}\n// \t\treturn null;\n// \t}\n// }\n\n// @Directive( {\n// \tselector: \"[value-validator]\",\n// \tproviders: [ { provide: NG_VALIDATORS, useExisting: ValueValidator, multi: true } ]\n// } )\n//\n// export class ValueValidator implements Validator, OnChanges {\n// \t@Input() type;\n// \t@Input() control;\n//\n// \tngOnChanges( changes:SimpleChanges ) {\n// \t\tthis.control.control.updateValueAndValidity( false, true );\n// \t}\n//\n// \tvalidate( control:AbstractControl ):{[key:string]:any;} {\n// \t\tlet valid:boolean;\n// \t\tswitch ( this.type ) {\n// \t\t\t// Boolean\n// \t\t\tcase NS.XSD.DataType.boolean:\n// \t\t\t\tswitch ( control.value ) {\n// \t\t\t\t\tcase \"true\":\n// \t\t\t\t\tcase \"yes\":\n// \t\t\t\t\tcase \"y\":\n// \t\t\t\t\tcase \"1\":\n// \t\t\t\t\tcase \"false\":\n// \t\t\t\t\tcase \"no\":\n// \t\t\t\t\tcase \"n\":\n// \t\t\t\t\tcase \"0\":\n// \t\t\t\t\t\tvalid = true;\n// \t\t\t\t}\n// \t\t\t\tbreak;\n//\n// \t\t\t// Numbers\n// \t\t\tcase NS.XSD.DataType.int :\n// \t\t\tcase NS.XSD.DataType.integer :\n// \t\t\t\tvalid = ! isNaN( control.value ) && ! isNaN( SDKLiteral.Factory.parse( control.value, this.type ) ) && Utils.isInteger( SDKLiteral.Factory.parse( control.value, this.type ) );\n// \t\t\t\tbreak;\n//\n// \t\t\tcase NS.XSD.DataType.byte :\n// \t\t\tcase NS.XSD.DataType.decimal :\n// \t\t\tcase NS.XSD.DataType.long :\n// \t\t\tcase NS.XSD.DataType.negativeInteger :\n// \t\t\tcase NS.XSD.DataType.nonNegativeInteger :\n// \t\t\tcase NS.XSD.DataType.nonPositiveInteger :\n// \t\t\tcase NS.XSD.DataType.positiveInteger :\n// \t\t\tcase NS.XSD.DataType.short :\n// \t\t\tcase NS.XSD.DataType.unsignedLong :\n// \t\t\tcase NS.XSD.DataType.unsignedInt :\n// \t\t\tcase NS.XSD.DataType.unsignedShort :\n// \t\t\tcase NS.XSD.DataType.unsignedByte :\n// \t\t\tcase NS.XSD.DataType.double :\n// \t\t\tcase NS.XSD.DataType.float :\n// \t\t\t\tvalid = ! isNaN( control.value ) && ! isNaN( SDKLiteral.Factory.parse( control.value, this.type ) ) && Utils.isNumber( SDKLiteral.Factory.parse( control.value, this.type ) );\n// \t\t\t\tbreak;\n//\n// \t\t\t// Dates\n// \t\t\tcase NS.XSD.DataType.date:\n// \t\t\tcase NS.XSD.DataType.dateTime:\n// \t\t\tcase NS.XSD.DataType.time:\n// \t\t\t\tvalid = Utils.isDate( SDKLiteral.Factory.parse( control.value, this.type ) );\n// \t\t\t\tbreak;\n//\n// \t\t\tcase NS.XSD.DataType.string:\n// \t\t\t\tvalid = Utils.isString( SDKLiteral.Factory.parse( control.value, this.type ) );\n// \t\t\t\tbreak;\n//\n// \t\t\tdefault:\n// \t\t\t\tvalid = Utils.isString( control.value );\n// \t\t\t\tbreak;\n// \t\t}\n// \t\tif( ! valid ) {\n// \t\t\treturn { \"invalidTypeError\": true };\n// \t\t}\n// \t\treturn null;\n//\n// \t}\n// }\n//\n//\n// @Directive( {\n// \tselector: \"[id-pointer-validator]\",\n// \tproviders: [ { provide: NG_VALIDATORS, useExisting: IdPointerValidator, multi: true } ]\n// } )\n// export class IdPointerValidator implements Validator {\n// \t@Input() documentURI;\n//\n// \tvalidate( control:AbstractControl ):{[key:string]:any;} {\n// \t\tif( ! ! control && typeof control.value === \"undefined\" ) {\n// \t\t\t//if( ! ! control && (typeof control.value === \"undefined\" || control.value.trim().length === 0) ) {\n// \t\t\treturn { \"emptyControl\": true };\n// \t\t}\n// \t\tif( ! ! control.value ) {\n// \t\t\tif( ! control.value.match( \"(https?:\\/\\/(?:www\\.|(?!www))[^\\s\\.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})\", \"g\") ){\n// \t\t\t\t\t\tif( ! URI.Util.isBNodeID( control.value ) ){\n// \t\t\t\t\t\t\treturn { \"invalidId\": true };\n// \t\t\t\t\t\t}\n// \t\t\t\t\t}\n// \t\t\telse{\n// \t\t\t\tif( typeof control.value === \"string\" && ! control.value.startsWith( this.documentURI ) ) return { \"invalidParent\": true };\n// \t\t\t\tif( control.value.split( \"#\" ).length > 2 ) return { \"duplicatedHashtag\": true };\n// \t\t\t}\n// \t\t}\n// \t\treturn null;\n//\n// \t}\n// }"],"sourceRoot":"/source/"}